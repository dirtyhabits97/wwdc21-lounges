Request ManagerWORKFLOW Jun 8th at 2:47 PM
@Jeff has asked:
Is there a SwiftUI equivalent for preferredStatusBarStyle in iOS 15?

Curt (Apple)
I’m afraid there is no new API for that at this time. That would be a great enhancement Feedback to help us gauge interest.

Curt (Apple)
If you’ve already filed it, thank you! We know it’s something folks want.

Thank you! I will definitely file a Feedback.

------------

Request ManagerWORKFLOW Jun 8th at 2:48 PM
@Seyed Parsa has asked:
How to force SF Symbols not to be automatically filled/unfilled based on the context (as shown in tab bars)? Is there any way to force them to be non-filled?

Jacob (Apple)
You can use .symbolVariant(.fill) to opt in a view or view hierarchy to fill variants, and see the SymbolVariants type for other variants you can use with it.

Seyed Parsa
Thanks a lot!

Curt (Apple)
Check out the SF Symbols in SwiftUI talk tomorrow for more goodies!

------------

Request ManagerWORKFLOW Jun 8th at 2:48 PM
@Shubham has asked:
How do we assign a TextField in SwiftUI to gain focus as soon as a View opens?

Matt (Apple)
You can use the new @FocusState property wrapper and focused() modifier to programmatically control focus in many different ways, including when your UI first appears. For example, you could trigger a specific view to be focused using onAppear or any other event callback.

Shubham
I see understood, thank you!

Soo Rin
@Matt (Apple) the last time I checked (a few months ago) the focusable  modifier on tvOS was buggy where if the modifier exists, it would consume the tap actions. do you know if this is fixed? (edited) 

Tanu (Apple)
The focused modifier is new this year.

Soo Rin
sorry I meant to say focusable

Shane
Is that available on all platforms?  For instance, can I have several text fields that I can change focus programmatically? (edited) 

Matt (Apple)
@Soo Rin please verify on the betas, and if that issue still exists, submit a Feedback with a sample project. Sometimes these issues can depend on how you are structuring your code, and we can help diagnose that with a sample project, or try to offer a workaround.

Shane
The classic example is filling in a five digit 2-factor code.  Each single digit entry would jump to the next entry.

Parry (Apple)
@Soo Rin depends on your view hierarchy. Can you provide a code snippet that demonstrates this issue plz?

Soo Rin
@Matt (Apple) @Tanu (Apple) at least looking through the documentation it seems like it's been deprecated, i assume replaced by the new focused  modifier? I'll try to reflect it in my code and see what happens!

Matt (Apple)
The version that takes a closure callback is deprecated, because you should now use FocusState to track focus instead of that callback

------------

Request ManagerWORKFLOW Jun 8th at 2:49 PM
@Seyed Parsa has asked:
Can we customize and put "searchable" search box anywhere? (Without going the old way, adding text views)

Harry (Apple)
The searchable modifier supports a few customization points with the SearchFieldPlacement type. You can pass a placement into the modifier: .searchable(text: $text, placement: .navigationBarDrawer(displayMode: .always)).

Shubham
Okay, got it. Thanks a lot! :smile:

Seyed Parsa
Thanks a lot!

Harry (Apple)
If those placements aren't what you need, you will need to roll your own solution. Though feedback on other placements you would like to see would be helpful!

------------

Request ManagerWORKFLOW Jun 8th at 2:49 PM
@Matthew has asked:
Can we use the new buttons with non-SF single-color graphics?

Taylor (Apple)
Yep, in fact the new buttons can have a label of any view, including shapes and more! :smile:

Taylor (Apple)
The one thing to be careful of with custom images is that they use template rendering if you want the standard foreground styling within the button. (otherwise they’ll be the exact color of the image’s pixels) (edited) 

Matthew
Will do — thanks!

------------

Request ManagerWORKFLOW Jun 8th at 2:52 PM
@Jonathan has asked:
Can the new `.refreshable` API be used with custom refresh controls / spinners?

Harry (Apple)
Take a look at the EnvironmentValues.refresh property. The refreshable modifier sets this property up with closure provided to the modifier. You can query this property ( @Environment(\.refresh) private var refresh ) to hook up to your own UI

Geraldine
I definitely would love to see an example of this @Harry (Apple)

Jonathan
Thanks @Harry (Apple) thats amazing!

------------

Request ManagerWORKFLOW Jun 8th at 2:52 PM
@Shaun has asked:
The new `detents` for sheets in UIKit, to allow them to sit at different heights, looks amazing! Unfortunately there doesn't seem to be an equivalent in SwiftUI – is there any plan to bring it across?

Curt (Apple)
I’m sorry, but we can’t comment on future plans.

Curt (Apple)
This is something we know folks would appreciate. Enhancement request Feedback with particularly use case would really help us.

Curt (Apple)
We’re particularly interested in use cases around variable heights in SwiftUI sheets.

------------

Request ManagerWORKFLOW Jun 8th at 2:55 PM
@Clément has asked:
does the modifier of importItemProviders work with other commands, or other stuff to import things in the app ?

Taylor (Apple)
It works with any macOS system service that vends data. So if you had a service or shortcut that didn’t take input, but produced output — your app’s importItemProviders could consume that data when the user invokes that service

Clément
amazing ! thanks !

----------

Request ManagerWORKFLOW Jun 8th at 2:57 PM
@Seyed Parsa has asked:
Does using more SF Symbols have an impact on total app size? Or they all are stored in the OS?

Taylor (Apple)
These are part of the OS, so you can feel free to go wild with all the symbols you want with no impact to app size :smile:

Seyed Parsa
Thanks a lot! :slightly_smiling_face:

Dan
Is there a limit to where SFSymbols change size? I put them in a taskbar but it doesn’t seem like they are scaling with dynamic text…

----------

Request ManagerWORKFLOW Jun 8th at 2:55 PM
@Fernando has asked:
When using the WatchKit way to get text input, do we still get the text input improvements from SwiftUI? E.g. remembering the user choice of scribble vs. voice input

Scott (Apple)
@Fernando if don't pass any suggestions to the WatchKit API, then yes, you get all of the new behavior.

----------

Request ManagerWORKFLOW Jun 8th at 2:57 PM
@Seyed Parsa has asked:
Does using more SF Symbols have an impact on total app size? Or they all are stored in the OS?

Taylor (Apple)
These are part of the OS, so you can feel free to go wild with all the symbols you want with no impact to app size :smile:

Seyed Parsa
Thanks a lot! :slightly_smiling_face:

Dan
Is there a limit to where SFSymbols change size? I put them in a taskbar but it doesn’t seem like they are scaling with dynamic text…

----------

Request ManagerWORKFLOW Jun 8th at 2:55 PM
@Fernando has asked:
When using the WatchKit way to get text input, do we still get the text input improvements from SwiftUI? E.g. remembering the user choice of scribble vs. voice input

Scott (Apple)
@Fernando if don't pass any suggestions to the WatchKit API, then yes, you get all of the new behavior.

----------

Request ManagerWORKFLOW Jun 8th at 2:55 PM
@Clément has asked:
does the modifier of importItemProviders work with other commands, or other stuff to import things in the app ?

Taylor (Apple)
It works with any macOS system service that vends data. So if you had a service or shortcut that didn’t take input, but produced output — your app’s importItemProviders could consume that data when the user invokes that service

Clément
amazing ! thanks !

----------

Request ManagerWORKFLOW Yesterday at 4:38 PM
@Paul has asked:
What's your recommended approach to displaying a new macOS window? Not a new document or a confirmation dialog, just "here is some information that makes sense to show right now", such as unlocking an IAP. I've seen hacks with `handlesExternalEvents()` but it's not very pleasant.

Jeffrey (Apple)
Apologies for the delayed response here. We don’t have much API in this area. A NavigationLink when used within a commands context will open a new window, and as you noted, handlesExternalEvents can be used to, though this is primarily due to the default behavior of that modifier, which is to create a new window for the given scene, if no windows prefer to handle the event. We’d love a feedback for this functionality, and if you can share any specifics of your use case in it, that is even better. Thanks!

----------

Request ManagerWORKFLOW Yesterday at 3:05 PM
@Joshua has asked:
Since you can't talk about future plans, let's go into the past:
When SwiftUI was introduced, your demo showed off a little app for Apple's crack marketing team to determine the next macOS name. Were there other app ideas considered as the first demonstration of SwiftUI to the public?

Josh (Apple)
oh wow, good question. I built a whole mess of different possible apps, and we talked with product marketing about a bunch of different potential options. I think we were in a meeting with Craig when someone from product marketing suggested the macOS name chooser, which I then prototyped and ultimately stuck. but yes, we definitely went through quite a few different ideas!

----------

Request ManagerWORKFLOW Yesterday at 2:57 PM
@Ron has asked:
For SwiftUI macOS document apps, is there a recommended way to save and restore window size and position?

Jeffrey (Apple)
Hi, when state restoration is not enabled on macOS, this is expected behavior at the moment. We’d welcome a feedback for this, though. If you could include any information about your use case as well, that’d be very helpful. Thanks!

Request ManagerWORKFLOW Yesterday at 2:54 PM
@Gene has asked:
Suggestion to the designers amongst the SwiftUI folks present:  it would be great if there were more examples of unique user experience interactions, especially navigation, instead of assuming that everyone wants to always use NavigationView as the central UX construct.  UIKit was only slightly better with sparse examples to customize Navigation View transitions, but it too, lacked complete flexibility.  Would love to hear your feedback on this!

Jake (Apple)
Howdy! Unfortunately customizing navigation transitions isn’t supported today — meaning if you want to invent awesome transitions you’ll need to create your own containers and the state that manages them… but you’ll need to ensure your custom goodies properly handle accessibility, common system interactions, and more which can be tricky. Ideally, please file feedback with some use cases or examples for what you have in mind, I would love to see the team take a look at enabling awesome experiences that work well with the system!

Gene
Understood - but beyond custom transitions, my comment is really about custom user experiences, outside of the realm of a standard Navigation View.  It seems to me that Apple pushes the Navigation View (for good reasons, as you stated), and because of this, other UI code examples, such as search bar placement, scroll views, and more, often assume that your app uses Navigation Views.

It would be nice to have code examples/tutorials on custom interfaces.
After all, if all apps conformed to standard SwiftUI Navigation View interfaces, the Apple Design awards would be much less interesting. :grin:

Jake (Apple)
Ah, that’s great feedback, thanks for clarifying!

----------

Request ManagerWORKFLOW Yesterday at 2:49 PM
@Mikael has asked:
Is there ever a case in which Spacer() is superior to .frame(maxWidth: .infinity)/.frame(maxHeight: .infinity)?

Jake (Apple)
Howdy! There was a similar question yesterday about Spacer ‘versus’ frame, check out the answer for how they compare:
https://wwdc21.slack.com/archives/C0246E5AEEL/p1623348635448100

----------

Request ManagerRequest Manager
@Chang has asked:
In most cases, the layout behavior with Spacer can be replaced with .frame(maxWidth:,alignment:) (or height)  seamlessly. Since Spacer is an actual View that is arranged within the view hierarchy, using Spacer will consume more memory and cpu resources. And Demystify SwiftUI also says "modifier is cheap".
So should I use .frame instead of Spacer as much as possible?

Jake (Apple)
But the gist is: they both have their purposes and are extremely efficient from a performance perspective. So, you should focus on what your intention is and which reads better or offers the functionality you’re trying to utilize as you construct your hierarchies :slightly_smiling_face:

----------

Request ManagerWORKFLOW Yesterday at 2:47 PM
@Nicolas has asked:
Hey, Is it a way to have the coordinate of the cursor inside an image in SwiftUI.
I would like to display a crosshair by drawing two lines from the cursor to the edges of the picture.
I tried with NSEvents but it gave me the cursor location relative to my screen.
thanks, Nicolas

Jake (Apple)
Howdy! This sounds like excellent topic to file feedback to help the team understand your use case, as I don’t believe this is supported today.

----------

Request ManagerWORKFLOW Yesterday at 2:46 PM
@Reuben has asked:
How do we set `setNeedsUpdateOfScreenEdgesDeferringSystemGestures` in a swiftUI app?

Reuben
Sorry, I actually meant preferredScreenEdgesDeferringSystemGestures

Curt (Apple)
Hi, @Reuben. Thanks for the question.

Curt (Apple)
Currently you need to use a representable to access that property.

Curt (Apple)
That would be a great enhancement request Feedback for SwiftUI though!

----------

Request ManagerWORKFLOW Yesterday at 2:46 PM
@Paul has asked:
Are you able to give some indication of why the semantic background colors from UIKit are missing? We only have `Color.background` as opposed to the main varying alternatives, and it's annoying to have to wrap them repeatedly. (FB: FB7572346 :kissing_heart:)

Taylor (Apple)
Hey @Paul, good question. A goal for us is that the Color and other API we provide works great on all platforms. So there are often other APIs to help get those effects: for instance GroupBox on iOS will produce the stacking (secondary and so on) system background colors, and on macOS gives you a similar effect but using the more platform appropriate group box (9-part) artwork instead of colors at all. The new .primary, .secondary, .tertiary, .quaternary shape styles are similar in that they also work across platforms and now can correctly give the correct vibrant rendering effect on top of materials :smile:
So while we might not add a Color for everything that UIKit has, we do want to make sure we have coverage for those design concepts. (so specific feedbacks on things that are missing are always appreciated!)

Andrew
I agree. And now that Color requires the uiColor: …..   Color(uiColor: .secondaryLabel) it’s even more letters

Andrew
Oh nice! Makes sense

Taylor (Apple)
Things like label , secondaryLabel, etc are all achievable using those shape styles above and are even smarter in those material contexts :slightly_smiling_face: , i.e. .foregroundStyle(.secondary)

Javier
Any reason why primary were implemented as separate styles (PrimaryContentStyle, SecondaryContentStyle), instead of values of single ContentStyle), kind of what you did with Material, where a single style has different values. With materials, you can do .background(flag ? .thinMaterial : .regularMaterial)  but with content styles you cannot do .foregroundStyle(flag ? .primary : .secondary) because each is a different style.

Taylor (Apple)
Also a good question. If you already haven’t, please file a feedback and we could try to take a look at making that better

Javier
great, I will…

----------

Request ManagerWORKFLOW Yesterday at 2:46 PM
@Aimin has asked:
If I pass around a single @StateObject through injection from View A to Subview B to Subview C, when the data updates, will all 3 views get invalidated and redrawn? What if only View A and C need to use the data, and view B is only a middleman?

Curt (Apple)
Only views that read properties of the object should update, but do note that if a view reads any property it will be invalidated on objectWillChange, even if the particular property begin read did not change.

Jackson
To be explicit (and have the view not update) you can pass them without a property wrapper and use let instead of var where the object's properties aren't used

----------

Request ManagerWORKFLOW Yesterday at 2:42 PM
@Wilson has asked:
I'm trying to update a Text view based on some state (eg. from a text field). The text is inside a scroll view, and I am using `ScrollViewReader` to scroll to the end whenever the text changes. For some reason, `scrollTo` doesn't work until I manually start scrolling — after that it works fine :thinking_face:
```
struct Foo: View {
    @State private var text = ""
    private let letters = Array("abcdefghijklmnopqrstuvqxyz")
    private let timer = Timer.publish(every: 0.1, on: .main, in: .common).autoconnect()
    var body: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            ScrollViewReader { scrollView in
                HStack {
                    Text(self.text)
                        .fixedSize(horizontal: true, vertical: false)
                        .onAppear { scrollView.scrollTo(0) }
                        .onChange(of: self.text) { _ in scrollView.scrollTo(0) }
                    Color.clear
                        .id(0)
                }
            }
        }
        .onReceive(self.timer) { _ in
            self.text.append(letters.randomElement()!)
        }
    }
}
```

Jake (Apple)
Howdy! Please file feedback with this sample code, this looks like an issue the team should take a look at. Additionally, you should take a look at the new TimelineView and replace your use of Timer here. It’s not recommended to declare new objects in your view’s initializer without a @StateObject or @ObservedObject property wrapper, if you must use a Timer, store it inside an ObservableObject that you can refer to as a StateObject, or another similar technique. (edited) 

Wilson
OK thanks! The timer here was just for the sake of example, but I will have to check out TimelineView :smile:

Jake (Apple)
Gotcha! Phew :slightly_smiling_face:

Wilson
Updated! :tada:
struct Foo: View {
    @State private var text = ""
    private let letters = Array("abcdefghijklmnopqrstuvqxyz")
    var body: some View {
        TimelineView(.periodic(from: Date(), by: 0.1)) { context in
            ScrollView(.horizontal, showsIndicators: false) {
                ScrollViewReader { scrollView in
                    HStack {
                        Text(self.text)
                            .fixedSize(horizontal: true, vertical: false)
                            .onAppear { scrollView.scrollTo(0) }
                            .onChange(of: self.text) { _ in scrollView.scrollTo(0) }
                        Color.clear
                            .id(0)
                    }
                }
            }
            .onChange(of: context.date) { (_: Date) in // needed for type inference for some reason
                self.text.append(letters.randomElement()!)
            }
        }
    }
}

Jake (Apple)
You love to see it!

----------


Request ManagerWORKFLOW Yesterday at 2:39 PM
@Justin has asked:
Is it possible to enable “sloppy swiping” for navigation links in SwiftUI (swiping to go back from anywhere on the screen)? Also, is it possible to remove the 8pt buffer before a swipe to go back is recognized (so swipe to go back is recognized instantly rather than having the slight delay)?

Sam (Apple)
Unfortunately, this isn’t currently supported, but feel free to file feedback requesting these features!

----------

Request ManagerWORKFLOW Yesterday at 2:38 PM
@Regine has asked:
Can a SwiftUI View or Canvas be rendered into a PDF like a UIView can using draw ?  Is there another method that does this?

Sam (Apple)
Unfortunately, this isn’t currently supported. Please do file a feedback report if that’s a feature you’re interested in. We really do appreciate them!

Alejandro
I have a similar feedback raised FB9140022 :wink: let’s hope we get this in the future ^^

----------

Request ManagerWORKFLOW Yesterday at 2:34 PM
@Mateus has asked:
Is there anyway to dismiss a keyboard presented from a TextField while scrolling a List? There is a behavior provided in UIKit by keyboardDismissMode UIScrollView but it's disabled in SwiftUI List. Also, I tried to embed a UIScrollView using UIViewRepresentable and enable keyboardDismissMode but the behavior is buggy (FB9017657)

Sam (Apple)
Unfortunately, that’s not currently supported. Thank you for the feedback you already filed! We really do appreciate it. If you want to file an additional feedback report requesting API for solving the problem in a SwiftUI-esque way as well, that would be appreciated as well!

Paul
Oh! That would be a lovely addition. I might dupe the radar :speak_no_evil:

----------

Request ManagerWORKFLOW Yesterday at 2:34 PM
@Kedar has asked:
Is there any way to convert from the old AppDelegate/SceneDelegate lifecycle to the new "SwiftUI 2" lifecycle? I'd rather not re-write my _entire_ application, so while it's still in the early-ish phases I wanted to know if this was possible

Raj (Apple)
Yes! You can use the UIApplicationDelegateAdaptor property wrapper in your App. Something like this:
UIApplicationDelegateAdaptor var myDelegate: MyAppDelegate

Raj (Apple)
SwiftUI will instantiate an instance of your UIApplicationDelegate and call it in the normal fashion.

Raj (Apple)
Furthermore, if you return a custom scene delegate class from configurationForConnectingSceneSession, SwiftUI will instantiate it and call it as well.

Ricardo
Oh this is awesome, thanks!! :dark_sunglasses:

Kedar
Thank you!

----------

Request ManagerWORKFLOW Yesterday at 2:32 PM
@Mikael has asked:
Is there a way to make two views from different hierarchies, have the same hight/width/x/y position, that is easier to understand than using Preference Keys?

Raj (Apple)
Yes! Look into matchedGeometryEffect.

Andrew
I couldn’t get it working through different views tho

Andrew
I was trying to do an App Store-like transition

Andrew
I kind of forget but there always was a fade, and if you animated too quickly, the views didn’t get laid out correctly

Paul
I not-very-secretly hope that matchedGeometryEffect() will grow into a full UIViewControllerTransitioningDelegate replacement some day and work across sheets, navigation pushes, etc :slightly_smiling_face:  (No pressure, SwiftUI team! :sweat_smile: )

Andrew
That would be really good

Andrew
Especially with how Swift makes everything so much easier

Andrew
UIViewControllerTransitioningDelegate has always been hard for me

Andrew
I bet the SwiftUI replacement will be way easier to use

Paul
I mean, it couldn’t be any harder to use quite frankly :sweat_smile:

Andrew
Ehh, you need to temporarily duplicate your views, and making it interactive needs more delegate methods

----------

Request ManagerWORKFLOW Yesterday at 2:31 PM
@Rhys has asked:
Is it possible to display a SwiftUI view on an external display, on iPad/iPhone, using the SwiftUI App lifecycle?

Curt (Apple)
Thanks for the question. I’m afraid that’s not currently supported.

Curt (Apple)
Would you be able to file an enhancement request Feedback for that. I’d really appreciate it. :pray::skin-tone-3:

Rhys
Absolutely! Will do :blush:

----------

Request ManagerWORKFLOW Yesterday at 2:27 PM
@Samuel has asked:
this is a strange request, but is it possible to "intercept" the actions of a button or gesture with a modifier? wanting to devise a way "wrap" the invocation (for example with analytics calls)

Sam (Apple)
Unfortunately, that’s not currently possible today. If that’s something you’d find useful, please feel free to file a Feedback requesting it!

Jon
Adding your own simultaneous gesture can usually get this behavior.

----------

Request ManagerWORKFLOW Yesterday at 2:25 PM
@Paul has asked:
Are there any places where you think "yep, this is the place to use `onAppear()` rather than `task()`?

Curt (Apple)
onAppear() is still fine to use. There’s no need to update existing code that uses it. Going forward, I think task() provides a more general solution, even for short synchronous work, since it sets you up to evolve towards asynchronous work if necessary in the future.

Paul
So… you would always use task() for new code, or are there still places where onAppear() it the right solution? I was maybe expecting to see onAppear() being gently deprecated or similar.

Curt (Apple)
I’d always use task() personally, but there’s also a nice symmetry between onAppear() and onDisappear() that some folks will want to maintain.

Andrew
Ah I see

Andrew
Is there really any difference?

Curt (Apple)
While task() cancels any async work at onDisappear time, it doesn’t trigger new work then.

Sam (Apple)
@Paul We generally try to avoid deprecating things unless they’re actively harmful / dangerous / tricky. As we mentioned, onAppear is more limited than task, so I would recommend using it for new code, but onAppear isn’t harmful in any way.

Vitor
Maybe related (already asked, but got no answer): is there a way to run code “onDisappear” for modally presented views such as the picker presented by the “.fileImporter” modifier? I tried using, well, “onDisappear” on it, even by embedding “it” in another view, no luck there.

Vitor
I’m asking this to try and work around the bug that does not set the bound variable that presents/hides the picker when you dismiss it by touching outside its window

Víctor
@Sam (Apple) Couldn’t you overload onAppear with an variation that receives an async closure? I feel that task doesn’t exactly screams that it will trigger a new task when the view appears. Thanks!

James
Curious about this one.
I was wondering if various SwiftUI APIs (onAppear, Button, all sorts) would get async overloads since learning this was coming to Swift. If onAppear didn't have any new overloads I would have assumed there wasn't a way to do it.
Having not had chance to catch up with the sessions yet, I was also wondering what the task modifier did, given its ambiguous name. My first thought would be something relating to running tasks concurrently / queuing work, but this sounds like neither.
Is this some sort of limitation, or a design choice?

Curt (Apple)
The modifiers that got an async handler are ones where we can do something useful when an asynchronous task completes or the view lifetime ends. So refreshable hides the refreshing indicator when the task completes and task cancels the asynchronous task at the end of the view’s lifetime. For other actions, you can choose to create a separate async task to handle your work.

James
Makes sense! :slightly_smiling_face:

Vitor
I hate to tag you, @Curt (Apple), but any suggestion about my question: Maybe related (already asked, but got no answer): is there a way to run code “onDisappear” for modally presented views such as the picker presented by the “.fileImporter” modifier? I tried using, well, “onDisappear” on it, even by embedding “it” in another view, no luck there. I’m asking this to try and work around the bug that does not set the bound variable that presents/hides the picker when you dismiss it by touching outside its window (already reported/feedback-ed)

James
I imagine that's deliberately not supported, because if you can run onDisappear, you can also in theory apply all sorts of weird modifiers to the view (inverting colour, blocking clicks, overlaying views, or such). Allowing that sort of thing for ‘system UI’ seems ripe for abuse.

Vitor
You got a point there.

----------

Request ManagerWORKFLOW Yesterday at 2:19 PM
@Ron has asked:
Our apps stores the position of (our custom) split view controls in its documents. It would be nice to use HSplitView, VSplitView and give them as a parameter a binding to set their position to simplify storing and restoring their state. For now it seems I'd need to use a GeometryReader to get the state and a .frame on one of the child views to set the state. Can you recommend a cleaner approach?

Jake (Apple)
Howdy! Unfortunately there is no API to do this in SwiftUI today, would you mind filing feedback on this? It would be great to understand your use case here!

Ron
Already filed this morning: FB9161641

Ron
And FB9161619 too since the app is cross-platform.

Ron
How detailed should I be about our use case in the feature request? Screenshots helpful?

Jake (Apple)
In these cases I think it’s pretty clear what you’re asking for! Thanks for including the description of why you need it for your app, that should help give folks context!

----------

Request ManagerWORKFLOW Yesterday at 2:18 PM
@David has asked:
Is there a way to measure the rendering time or memory footprint for a SwiftUI's body method being called in XCTest?  I'd like to setup some baseline testing so that I can be aware of any regressions in performance, but I haven't been able to work out how to do it.

Curt (Apple)
I’m afraid not. I’d love to get an enhancement request Feedback for that use case. We have support for Instruments, but not XCTest.

David
Will do, happy to file a request. Thank you.

----------

Request ManagerWORKFLOW Yesterday at 2:18 PM
@Franco has asked:
In general, to pass data around, would it better to have an EnvironmentObject that could be called within a view, or an ObservedObject that gets passed down (and/or injected) through child views?

Sam (Apple)
Both have their uses, and it depends on the architecture you’re building. If you have one (or a few) large ObservableObjects that large parts of the view hierarchy need to see, I would generally recommend EnvironmentObject as SwiftUI can look at which of your views depend on the EnvironmentObject and only invalidate those when your ObservableObject changes (you can get this behavior with ObservedObject too, but it’s more cumbersome). Plus, views that don’t actually use the ObservableObject don’t get cluttered with code relating to it.
That said, if your model is, for example, an object graph that is largely not structured based on your view hierarchy, it may make more sense to use ObservedObject to grab pieces of that model out to use in your view.

----------

Request ManagerWORKFLOW Yesterday at 2:15 PM
@Samuel has asked:
on macOS, you can prevent a window from resizing by setting a specific frame size, however this doesn't prevent fullscreen/zoom. this results in a broken animation and a tiny view in the middle of the screen.
it is possible to tell swiftui the window does not support fullscreen?
fyi - FB9153959

Jeffrey (Apple)
Hi - sorry you are hitting this bug. Using a fixed size frame is the correct expression here. Also, thank you for the feedback!

----------

Request ManagerWORKFLOW Yesterday at 2:13 PM
@Thomas has asked:
Can you provide guidance for when the following error message is printed in the console:
`Bound preference CollectionViewSizeKey<UUID> tried to update multiple times per frame`
(`CollectionViewSizeKey<UUID>` is the name of the preference.)
The preference is updated from inside a GeometryReader. I think the error message happens if the preference modifier is inside a ScrollView.

Curt (Apple)
That indicates a cyclic update. The size of your GeometryReader is changing based on the size of your GeometryReader. Try lifting your GeometryReader higher in the view hierarchy if possible, or look for other ways to avoid the cycle.

Thomas
@Curt (Apple) thanks! Is there anything special about the ScrollView being an ancestor of the view using the preference? If I move the view out of the ScrollView, the log message goes away.

Curt (Apple)
Likely. ScrollView allows its content to resize beyond it’s on-screen size. That’s necessary to allow scrolling of the content. :slightly_smiling_face:

Curt (Apple)
I often have luck moving the GeometryReader outside the ScrollView, then passing the size down and doing math on it to compute nested sizes of nested views.

Thomas
@Curt (Apple) that won’t work in my use case unfortunately. I have a “flow layout collection view” kind of view, with a GeometryReader per item and the collection view as a whole changing its size to make sure it fits all items by listening to the preference changes. That “collection view” is somewhere inside the ScrollView.

James Michael
in UIKit, UICollectionView inherits from UIScrollView, which in compositional terms is equivalent to CollectionView embedding a ScrollView. (Inverting that would be like ScrollView inheriting from Collection)
You might try lifting your CollectionView (with its geometry logic) out of the ScrollView.
i.e. Collection > Scroll > "Cells"  instead of Scroll > Collection > "Cells"

----------

Request ManagerWORKFLOW Yesterday at 2:08 PM
@Wei has asked:
I am using `@ObservedObject` now for my model, since I still need to support iOS 13. However I know that `@StateObject` provides the correct behaviors to me. Is there a suggested way to use them at the same time for back compatibility? I first thought `if #available` might work, but it does not work for a property.

Curt (Apple)
For supporting iOS 13, you’ll need to use @ObservedObject and keep your object alive through some other means, like using a static property or keeping a reference in your application delegate.

Curt (Apple)
I don’t think trying to switch between observed object and state object buys you much here, since changing the owner of the object with availability checks would be awkward. (edited) 

Wei
Thanks! I guess it’s time to drop iOS 13 support. :joy:

Gilad
@Wei I’ve had luck holding on to the ObservableObject in @State and passing it down to a view that holds it in an @ObservedObject when supporting iOS 13.

Wei
@Gilad Thanks for sharing this. Yes, I have also tried it, but it brings a few random crashes inside  the AttributeGraph to me. I guess it is an anti-pattern and should be avoided as possible as I can?

Wei
Sorry for mention you @Curt (Apple) but I wonder is @Gilad’s solution an option or is there any concern?

Curt (Apple)
It’s possible to make @Gilad’s approach work, the challenge is — as discussed in the Demystify Talk — that not all views in a hierarchy are invalidated on a state change.

Curt (Apple)
So, if the State of the parent view is replaced, the original observable object can be deallocated, but the child view may still have a reference. :boom:

Wei
Got your idea! It requires careful state management and not that intuitive. I’d consider my case twice. Thank you! (Really awesome job you did, BIG THANKS)

Gilad
Yes, if you treat @State as a non-observing @StateObject and are careful to not replace it (give an initial value to stateHeldViewModel, and then modify its properties) it seems safe to me.
class ViewModel: ObservableObject {
    @Published var interestingValue: Int = 0
}
struct StateContentView: View {
    @State private var stateHeldViewModel = ViewModel()
    var body: some View {
        ObservingContentView(viewModel: stateHeldViewModel)
    }
}
struct ObservingContentView: View {
    @ObservedObject var viewModel: ViewModel
    var body: some View {
        Text("\(viewModel.interestingValue)")
    }
}

Curt (Apple)
As long as StateContentView is never invalidated, that will work.

----------

Request ManagerWORKFLOW Yesterday at 2:07 PM
@Shaun has asked:
I've had several intermittent crashes from environment objects being `nil` when I pass them to a sheet or NavigationLink. It's tricky to replicate due to being intermittent and I usually work around it by architecting my code differently to avoid passing environment objects.
Do you know of reasons this might happen? All I can think of is that the views that originate the environmentObject further up the view hierarchy are being taken out of memory. Thanks for any help you can provide!

Sam (Apple)
NavigationLink by design doesn’t flow EnvironmentObjects through to its destination as it’s unclear where the environmentObject should be inherited from. I suspect this might what’s causing your issue. In order to get the behavior you expect, you’ll have to explicitly pass the environmentObject through at that point.

Josh (Apple)
You can also apply the environmentObject to the NavigationView itself, which will make it available to all pushed content.

Mikael
What do you mean by unclear? Like how is it unclear?

----------

Request ManagerWORKFLOW Yesterday at 2:06 PM
@Ryan has asked:
Will the project in its entirety from **Build apps that share data through CloudKit and Core Data (wwdc21-10015)** be available for download?

Taylor (Apple)
Yep, that’s up at https://developer.apple.com/documentation/coredata/synchronizing_a_local_store_to_the_cloud

Ryan
Woot! Thanks for linking @Taylor (Apple)!

----------

Request ManagerWORKFLOW Yesterday at 2:03 PM
@Thomas has asked:
Are GeometryReaders really bad in terms of performance? I'm getting the feeling that they should be avoided, but I don't know if it's because they're inefficient, because they're "breaking" the layout, or because other solutions may exist (like anchored preferences) and be better suited for the purpose?

Curt (Apple)
Just like any tool, GeometryReader has a time and place where it is correct to use. There aren’t any particular performance pitfalls I’d call out with them, but they shouldn’t be used as a hammer.

----------

Request ManagerWORKFLOW Yesterday at 1:58 PM
@Cameron has asked:
I noticed that while using Combine and lists (say local search combined with remote results). Lists have a really, REALLY hard time keeping up with animated updates. I found the only reliable way to force correct data representation is to use `.id(UUID())` and turn off animations. Is this somewhat expected?

Curt (Apple)
We worked really hard on improving List performance in iOS 15, macOS Monterey, and aligned releases. Please try there and let us know if you’re still seeing issues.
If you aren’t doing so already, it also may be good to debounce the queries.

Cameron
Yeah - i’ve been debouncing and throttling. I think the issues popped up when changes occur during animation. Unfortunately our app crashes shortly after launch due to some kind of Metal error - it might be in Maps, as we don’t do anything special with graphics.
Otherwise, this blog post sums it all up - https://www.hackingwithswift.com/articles/210/how-to-fix-slow-list-updates-in-swiftui

Cameron
I’d like to try the SwiftUI preview, but for some reason, my text field doesn’t take keyboard input (!!) :shrug:

----------

Request ManagerWORKFLOW Yesterday at 1:56 PM
@Samuel has asked:
when creating a `UIViewRepresentable`, it is dangerous for the `Coordinator` to hold an instance of the `UIView` passed in `updateUIView()` or should it be strictly treated as ephemeral?

Taylor (Apple)
That is OK! Your coordinator will have been created before any views are — so in makeUIView you can give the coordinator a reference to that view (edited) 

Samuel
no worries with the coordinator holding that view instance, right? (maybe weakly?) (edited) 

Taylor (Apple)
Correct. You’ll want to break down that connection in dismantleUIView, which will be called when that view will be torn down

----------

Request ManagerWORKFLOW Yesterday at 1:52 PM
@Alexsander has asked:
I've implemented a View that displays a board game in landscape. When the device is rotated from landscape to portrait, I want the content to be rotated so the board game is vertical instead of squished. It all works but it's animating weirdly. Is there a way to tell SwiftUI that I want to stop certain animations on rotation?

Jake (Apple)
Howdy! Could you walk me through how you’re defining your animation here? :slightly_smiling_face:

Alexsander
Sure thing! Let me write up something more succinct for you so I don’t have to post the project for you

Jake (Apple)
For example, this reads as using the animation(_:) modifier without the value: parameter. If you want to ask SwiftUI to only animate when something specific happens, using the animation(_:value:) modifier will only kick off animations when the value changes. Additionally you can use a withAnimation block around a model change, but it may be hard to use that with orientation changes.

Robert
This is a device rotation, so isn’t it really just a response to a change in enclosing window size? In which case the animation is implicit.

Alexsander
I’m currently using a custom GeometryEffect that rotates around the top-left (screen origin). My GameBoardView uses a GeometryProxy to check whether we need to change to vertical mode and to calculate the correct safeAreaInsets to apply to the board chrome.

Robert
I have something similar:
    var body: some View {
        GeometryReader { geometry in
            if (geometry.size.width < geometry.size.height) {
                VStack {
                    ChessBoardView(moves: $moves)
                        .frame(height: geometry.size.width)
                        .overlay(Divider(), alignment: .bottom)
                    ChessBrowserView(moves: $moves)
                }
            } else {
                HStack {
                    ChessBoardView(moves: $moves)
                        .frame(width: geometry.size.height)
                        .overlay(Divider(), alignment: .bottom)
                    ChessBrowserView(moves: $moves)
                }
            }
        }
    }
but of course a chess board is square :slightly_smiling_face:

Alexsander
Yeah i’m doing something not so different actually (I also check for size classes because iPad has regular size classes)

Alexsander
It’s weird because the start and end positions/sizes are all fine, it’s more the intermediary frames that are weird?
QuickTime Movie 
Simulator Screen Recording - iPhone 12 Pro - 2021-06-11 at 13.00.10.mp4
10 MB QuickTime MovieClick to view details

Jake (Apple)
Oh very funky! I haven’t seen something like that before. Are you giving your content a frame that’s the width and height of a geometry reader to enforce it to lay itself out at that size regardless of any underlying changes?

Jake (Apple)
It almost looks like it’s interpolating between the width and height for a second and then returning to “normal” — but you may be able to force it to not respond to changes by enforcing an explicit width/height

Jake (Apple)
Also, do make sure you’re not using animation(_:)! It may be kicking off animations you may not expect in this case.

Alexsander
The four “side” views are laid out sort of weirdly? It’s more or less like this:
ZStack {
    HStack(spacing: 0) {
        WoodPaneView(position: .leading, size: CGSize(...), insets: ...)
        Spacer()
        WoodPaneView(position: .trailing, size: CGSize(...), insets: ...)
    }
    VStack(spacing: 0) {
        WoodPaneView(position: .top, size: CGSize(...), insets: ...)
        Spacer()
        WoodPaneView(position: .bottom, size: CGSize(...), insets: ...)
    }
}
.frame(width: self.size.width, height: self.size.height)

Robert
Where’s the white coming from?

Alexsander
I’m using @main on my App struct so it’s probably coming from something’s background

Jake (Apple)
if you scrub through your video very slowly you can see your 4 wood walls aren’t rotating, but are positioned to follow the edges of the screen as they rotate

Alexsander
That’s sort of the goal. Ideally the board shouldn’t appear to rotate? I want my rotation and the phone rotation to “cancel out”

Jake (Apple)
Yeah, but I wonder if instead of pinning them to the corners of what are essentially the real borders of the view, if you could wrap them in a frame that has an explicit width/height of the board, and then rotate that frame into the orientation you want. :thinking_face:

Jake (Apple)
And perhaps swap the width/height properties depending on which orientation you’re in? This is a fun problem! :smile:

Alexsander
That code snippet above is my WoodFrameView . My content view does this:
GeometryReader { proxy in
    let fullSize = proxy.sizeIncludingSafeArea
#if os(iOS)
    let orientation: BoardView.Orientation = (horizontalSizeClass == .compact || verticalSizeClass == .compact) && fullSize.width < fullSize.height * 0.9 ? .vertical : .horizontal
#else
    let orientation: BoardView.Orientation = .horizontal
#endif
    BoardView(orientation: orientation, size: fullSize, woodInsets: proxy.safeAreaInsets.max(EdgeInsets(Self.minimumInset)))
        .ignoresSafeArea()
}
Where the board view is the one that “rotates” the edge insets and swaps the size properties

Alexsander
I’m happy to try to distill a sample project and make a Radar/Feedback for this

Jake (Apple)
Ah, gotcha

Alexsander
I wonder if my “fullSize” is animating and isn’t fixed to the before/after values

Jake (Apple)
That may be the best bet. Additionally, some folks may be able to take a look that are much more familiar with orientation layout shenanigans :smile:

Alexsander
Perfect. I love  “Layout shenanigans”

Jake (Apple)
Also in your code so far I haven’t seen any animation calls meaning this is probably your UI just trying its best to lay itself out every frame the orientation is changing :open_mouth:

Alexsander
Excusing the typo, I do see that it is animating. I did an onChange(of: fullSize…)
image.png 
image.png

Robert
You could take the approach of laying out your board within an invisible, fixed square view (aspect fit and centered within fullSize) which will then be able to rotate without changing size.

Alexsander
A centered square shape would be easier for sure, but not sure it would work for this game type? (backgammon)

Robert
Aren’t backgammon boards basically square once opened?!

Alexsander
It depends on your layout

Alexsander
(Meaning, yes, but in the iOS app it’s easier to make it not square because then everything has to be smaller)

Robert
But anyway, I mean you have a fixed invisible square (fit within the whole screen, and centered) and then you have your (rectangular) board laying out with respect to that square. The square never changes size (because the length of its side is just the minimum dimension of the screen), it only rotates. So the edges of your board never warp because they’re laid out WRT to something that’s not changing shape. (edited) 

----------

Request ManagerWORKFLOW Yesterday at 1:49 PM
@Janio Cassio has asked:
Hi guys, you all did a great job again congrats. My question is related to CanvasView, that view is pretty awesome and opens lots of possibilities for creative and generative art for example. I would like to know how behaves a Canvas encapsulated in a Timeline receiving updates of Bindings Combine's streams. During the render, does it lost the current time information, does it resets to re-render the new state or there's no re-rende at all and the Timeline still running wherever the body changes?

Curt (Apple)
Thank you!
As long as the identity of the timeline is the same, and the value of the schedule didn’t change based on the body update, it shouldn’t trigger a new update of the contained Canvas. If the content of the canvas itself changed, you will likely see another update from the TimelineView with the date of the current entry of the schedule.

Janio Cassio
Ok that’s great. It’s the best component ever hehe.
Thank you very much @Curt (Apple) and cheers for you and all Apple dev team :beers:

Curt (Apple)
I’m pretty excited about Canvas too. Time for some post-WWDC side project hacking. :slightly_smiling_face:

Janio Cassio
Indeed

----------

Request ManagerWORKFLOW Yesterday at 1:49 PM
@Chris has asked:
What is the best practice for bypassing the system styling for a component?
For example, in a Section header in a grouped list, SwiftUI automatically dims the content and capitalizes all text (as you would expect in a text-only section header for UIKit). Is there a built-in way to bypass this dimming and capitalization?

Harry (Apple)
Many of the customizations you see are part of the default styling that lets you have the most natural feeling UI by default. However, most of these default stylings should be overridable by using the same modifiers you would to get that style.
For example, if you want to remove the default capitalization of the section header, you can use the text case modifier:
Section {
 // ...
} header: {
 Text("My Header")
  .textCase(nil)
}
The same goes for other customization points like foreground style, font, etc.

----------

Request ManagerWORKFLOW Yesterday at 1:48 PM
@Tristan has asked:
Canvas seems to lose its intrinsic content size and appear as 10x10 when nested in a ScrollView, is there a as to work around this behaviour?

Curt (Apple)
Thanks for the question! You might try putting a flexible frame on the Canvas, something like .frame(maxWidth: .infinity, maxHeight: .infinity). (Apologies if I got that a little wrong. \me files Feedback asking for auto-complete in Slack.) (edited) 

Tristan
I draw based on the size parameter in the closure so I don't have the knowledge of parent container sizing without that. I'll give it a try though :thumbsup: (edited) 

Tristan
Hey @Curt (Apple) just to say that this didn't work :point_up:

Tristan
2 files 
Image 11-06-2021 at 19.39.jpg
Image 11-06-2021 at 19.38.jpg

Tristan
Image 11-06-2021 at 19.41.jpg 
Image 11-06-2021 at 19.41.jpg

Curt (Apple)
Oh, wait. The Canvas will need a fixed frame. Otherwise the scroll view can’t know how big to make it.

Curt (Apple)
The content of the scroll view doesn’t have any intrinsic size in the scrolling axis.

Tristan
It’s not far off being a GeometryReader at that point right? I’d need to calculate all the dimensions of any content to know that frame size.

Curt (Apple)
It’s immediate mode drawing. So yes, you need to calculate the dimensions if you want to embed it in a scrollable area.

Tristan
Setting the frame does work btw, it’s just I wanted to react to the offered size rather than recalculate everything

Curt (Apple)
It is reacting to the offered size.

Curt (Apple)
There is no offered size in the scrolling axis.

Tristan
Gotcha :skin-tone-2:

Tristan
Thanks Curt!

Curt (Apple)
Thanks for using SwiftUI!

Tristan
From day 1 and commercially, despite some sharp edges, I love it.

----------


Request ManagerWORKFLOW Yesterday at 1:48 PM
@Tristan has asked:
Canvas seems to lose its intrinsic content size and appear as 10x10 when nested in a ScrollView, is there a as to work around this behaviour?

Curt (Apple)
Thanks for the question! You might try putting a flexible frame on the Canvas, something like .frame(maxWidth: .infinity, maxHeight: .infinity). (Apologies if I got that a little wrong. \me files Feedback asking for auto-complete in Slack.) (edited) 

Tristan
I draw based on the size parameter in the closure so I don't have the knowledge of parent container sizing without that. I'll give it a try though :thumbsup: (edited) 

Tristan
Hey @Curt (Apple) just to say that this didn't work :point_up:

Tristan
2 files 
Image 11-06-2021 at 19.39.jpg
Image 11-06-2021 at 19.38.jpg

Tristan
Image 11-06-2021 at 19.41.jpg 
Image 11-06-2021 at 19.41.jpg

Curt (Apple)
Oh, wait. The Canvas will need a fixed frame. Otherwise the scroll view can’t know how big to make it.

Curt (Apple)
The content of the scroll view doesn’t have any intrinsic size in the scrolling axis.

Tristan
It’s not far off being a GeometryReader at that point right? I’d need to calculate all the dimensions of any content to know that frame size.

Curt (Apple)
It’s immediate mode drawing. So yes, you need to calculate the dimensions if you want to embed it in a scrollable area.

Tristan
Setting the frame does work btw, it’s just I wanted to react to the offered size rather than recalculate everything

Curt (Apple)
It is reacting to the offered size.

Curt (Apple)
There is no offered size in the scrolling axis.

Tristan
Gotcha :skin-tone-2:

Tristan
Thanks Curt!

Curt (Apple)
Thanks for using SwiftUI!

Tristan
From day 1 and commercially, despite some sharp edges, I love it.

----------

Request ManagerWORKFLOW Yesterday at 1:48 PM
@Paul has asked:
Hello. In a Mac SwiftUI app, if i have a sidebar that auto-hides (i.e. ipad screen shared by another app in multitasking), I can't seem to drag items out of that sidebar and onto the primary view. Is this a known limitation?

Jeffrey (Apple)
Could you elaborate more on your issue here? Is it that you have an onDrag(_:) on your sidebar items and you’re not seeing that work, or something different?

Paul
In this simple example, if the sidebar is auto-hidden, like an ipad in vertical mode, i can’t drag items from the list in the sidebar onto my primary view.
var body: some View {
        NavigationView {
            sidebar
            primary
        }
    }
Yes, I have onDrag:
var sidebar: some View {
        List {
            Text("Item 1")
                .onDrag({ NSItemProvider(object: "Item1" as NSString) })
            Text("Item 2")
                .onDrag({ NSItemProvider(object: "Item2" as NSString) })
        }
        .listStyle(SidebarListStyle())
    }
The receiving end is as follows:
var primary: some View {
        Rectangle()
            .foregroundColor(dropping ? .green : Color.gray.opacity(0.5))
            .cornerRadius(20)
            .padding(30)
            .overlay(Text("Drop items here."))
            .onDrop(of: [UTType.text], isTargeted: $dropping, perform: { providers in
                return true
            })
    }
(edited)

Jeffrey (Apple)
Could you elaborate on what you mean by “auto-hidden”? I’m not sure I know when this would happen on macOS. The code you’ve posted above looks ok to me though. One tricky bit when having text in a list like that is that only the area where the text is will be draggable,  not the entire cell. Does specifically grabbing the text to drag work?

Paul
I’m so sorry, I said macOS and meant iPadOS - same question, but iPadOS.

Jeffrey (Apple)
Ok, so then in landscape say, where you have to open the slideover - youre unable to drag them in that case, but they work fine when its in landscape?

Jeffrey (Apple)
oops, sorry i meant in portrait for the first part there

Paul
Yes, that’s correct - works fine when the sidebar is fixed.

Jeffrey (Apple)
Interesting. Could you please file a feedback with this? It sounds like a bug.

Paul
I posted one back in September, FB8661928. But otherwise there’s no obvious reason this shouldn’t work?

Jeffrey (Apple)
I can’t think of any obvious reason, no.

Jeffrey (Apple)
Also, thanks for the feedback!

Paul
Ok, thanks and excellent work to you and the teams!

----------

Request ManagerWORKFLOW Yesterday at 1:42 PM
@Leonard has asked:
How do I profile SwiftUI code, to know how to optimize my views? Instruments is almost only showing SwiftUI library code, so it's hard to see what is expensive to render...

Curt (Apple)
Using the SwiftUI instrument will help call out expensive body methods. In addition it’s important to limit the number of times each views body will get reevaluated. Highly recommend watching the Demystifying talk for some in depth looks at how this works.

Curt (Apple)
Pro tip: call the new debug helper Self._printChanges() inside body to log which property caused the view to be reevaluated.

Leonard
Thanks! Is there anyway to find views which are expensive to render, especially in ScrollViews. There the body doesn’t even get called…

Andrew
@Curt (Apple) is there a link to the documentation to that? Sounds promising!

Curt (Apple)
It’s not technically API—notice the leading underscore—so should only be used in debugging. My one sentence pro-tip is the extent of the docs I’m afraid.

Andrew
Oh ok. Thanks!

----------

Request ManagerWORKFLOW Yesterday at 1:41 PM
@Robert has asked:
Hi folks! Thank you for SwiftUI -- I can't believe how straightforward it makes so many things.
I'm wondering, is there any way to bind to the state of *expansion* in a hierarchical `List` (i.e. one created with a `children`) parameter, so that we can expand and collapse items programmatically?

Curt (Apple)
Thanks for the question! I’m afraid there’s not currently a way to bind the expansion state of an entire hierarchy. You can use DisclosureGroup inside a List to bind a single level.
I’d love an enhancement request Feedback with your particular use case. Managing the expansion state of an entire hierarchy is a difficult API design problem, so more info on your use case would be super helpful!

Robert
Thanks Curt! I am also looking to bind the selection state of a whole navigation stack! I’ll file an enhancement request.

----------

Request ManagerWORKFLOW Yesterday at 1:39 PM
@Marcelo has asked:
How can I pass an @EnvironmentObject to a ViewModel? I'm trying to change a tab inside the ViewModel using the UserSettings.

Luca (Apple)
@EnvironmentObject and all the other SwiftUI’s property wrappers are only valid and functional when used inside a View.

Marcelo:flag-br:
yeah Luca, but can I access somehow inside the view model?

Luca (Apple)
That’s really depended on how you’ve implemented your code. I general I would discourage you from using views to pass data between different model objects.

Marcelo:flag-br:
struct YourView: View {
  @EnvironmentObject var settings: UserSettings
  @ObservedObject var viewModel = YourViewModel()
  var body: some View {
    VStack {
      Text("Hello")
    }
    .onAppear {
      self.viewModel.setup(self.settings)
    }
  }
}

Marcelo:flag-br:
I don’t know if this can cause any side effects

Luca (Apple)
That will work, the gotcha is that you might get onAppear more than once so you should be ready to handle that. Also if you allocate YourViewModel inline you probably want to use @StateObject. Overall though I would suggest again to not use views to pass data between your model objects.

----------

Request ManagerWORKFLOW Yesterday at 1:37 PM
@Adrian has asked:
what is the best way to deal with atomic changes in state when changing several state variables in sequence? I can manage this generally with `onChange` but it doesn't trigger the action when the state variable was set to the same value it had before (thus no change). I'd like to make sure that I trigger my update code even if the value didn't change (equivalent to didSet in Swift, which is triggered regardless of the old value)

Jake (Apple)
Howdy! Could you give an example of what you’re trying to do? I think you have a couple techniques here but getting a better picture of what you’re trying to accomplish will help!

----------

Request ManagerWORKFLOW Yesterday at 1:37 PM
@Wilson has asked:
[SE-309](https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md) allows using protocols with associated types as existentials, assumedly including `View`. At that point, will there be a difference between a `View` existential and `AnyView` in terms of view identity?
2 replies

Curt (Apple)
I :heart:  that proposal! I can’t comment on implementation details, but generally AnyView erases more information than an existential, so the existential would still have the edge.

Wilson
Yeah I can't wait to get rid of my eraser types! Curious to see how it will play out in SwiftUI!

----------

Request ManagerWORKFLOW Yesterday at 1:30 PM
@Wilson has asked:
I noticed `@FocusState` doesn't support an initial value — instead, you can set the focus in `onAppear`. Is there a reason for this?

Jeffrey (Apple)
One way to think of focus (not to be confused with the new user-facing feature we just launched) is that it is global state managed by the framework. A lot of the times, the user will be the one in control of this state, by selecting a text field, etc. The new @FocusState and focused(_:) API allows for some influence over that state as well, but ultimately, the source of this state is still internal to SwiftUI. Does that help to answer your question?

Wilson
@Jeffrey (Apple) Ah OK, that makes sense! So there may even be cases where focus isn't granted — the @FocusState is just a "suggestion"?

Jeffrey (Apple)
I tend to think of @FocusState as a client’s view in into the state that the framework is managing.

Wilson
OK! That would explain why it's not just @State too :slightly_smiling_face:

----------

Request ManagerWORKFLOW Yesterday at 1:29 PM
@Kedar has asked:
I wasn't able to secure a lab spot ("applied" for all of the SwiftUI open labs, but didn't get selected for any). Does anyone know why a disabled button being re-enabled would have the text rendered under the re-enabled color?

Curt (Apple)
Thanks for the question. We might need sample code to understand this one. Can you reproduce in a sample view? If so, you could add that sample to a Developer Forums post or ask Developer Technical Support.

----------

Request ManagerWORKFLOW Yesterday at 1:26 PM
@Javier has asked:
I'm curious, is ShapeRole  working at all? I made my custom shape and overwrite it with .stroke but there was no change in rendering. It always fills the shape. I know the role variable is being accessed (I put a print statement)... but maybe I'm missing something. And also, what is the purpose of the separator role? It is not very clear from the documentation how that would affect output.

Taylor (Apple)
The role doesn’t strictly dictate exactly how the shape will be treated — it can still be explicitly fill or stroke’d by its use site.
This more determines the expected semantics of how its intended to be used, in a way that affects its default foreground styling.
For instance, you could have a stroke role Rectangle that is fill’ed and used as a divider-like element, and so it will receive divider-like default foreground treatment.

Javier
When you say it will receive divider-like default foreground treatment, you mean...? To be more specific, could you provide an example where making a rectangle with stroke role produce a different output than having a fill or divider role?

Taylor (Apple)
Sure! The effect is pretty context dependent, so I’ll prepare an example that shows it off

Javier
Thanks, I'm more fluent in swift, than english :stuck_out_tongue_winking_eye:

Taylor (Apple)
So here’s a neat example in combination with materials:
struct ContentView: View {
    var body: some View {
        ZStack {
            LinearGradient(colors: [Color.red, Color.green, Color.blue, Color.indigo], startPoint: .leading, endPoint: .trailing)
            VStack {
                Spacer()
                Rectangle().fill().frame(height: 5)
                MySeparatorShape().fill().frame(height: 5)
                Spacer()
            }
            .background(.regularMaterial)
        }
    }
}
struct MySeparatorShape: Shape {
    func path(in rect: CGRect) -> Path {
        Rectangle().path(in: rect)
    }
    static var role: ShapeRole {
        .separator
    }
}
MySeparatorShape basically being a rectangle, but with a specialized role

Taylor (Apple)
And that snippet produces the below, since the default foreground for that separator role fill becomes one optimized for acting like a separator on top of materials (edited) 
image.png 
image.png

Javier
Wonderful! Super, super, super helpful! :smile:
Request ManagerWORKFLOW Yesterday at 1:26 PM
@Rhys has asked:
Is there a way to animate hiding/showing the Navigation Bar in SwiftUI?

Curt (Apple)
If you change the state that drives navigationBarHidden from inside a withAnimation block, it should animate. If it doesn’t, that’s a bug in SwiftUI.

Rhys
OK, thanks. I am changing that state from within a withAnimation block and it doesn’t seem to animate (at least on iOS 14.5). I’ll file a feedback!

----------

Request ManagerWORKFLOW Yesterday at 1:24 PM
@Chris has asked:
What's the best replacement for a `tableHeaderView` for a grouped list?
I want to avoid having a cell with a different visual style containing the content to be used as the header view, but I want to avoid sticky headers that are typically found in plain table views. What is the state of the art here?

Jake (Apple)
Howdy! Great question, it’s not clear to me if using a custom row instead of a section header would get what you want here, but I think it’s a totally viable reason for feedback explaining your use case to make usually-sticky headers no longer sticky!

Chris
You know, in a grouped tableView context, I somehow never tried setting it as a section header. You’re a gentleman and a scholar, thanks for taking my question. :slightly_smiling_face:

----------

Request ManagerWORKFLOW Yesterday at 1:22 PM
@Gernot has asked:
Is there a way to get the current font size and weight? I want to draw in a canvas in a way that matches SF Symbols as well as possible. Is there a way to resolve the current `Font` like i can resolve `Text` and get these attributes?

Jake (Apple)
Howdy! Great question, I don’t believe there’s a way to get the resolved font size, weight, and design today. This is an excellent case where a feedback from you could help the team understand your needs!

Tristan
You can access font through the environment but can’t change a font based on an existing font. i.e you can’t take that font and give it a new text style (from my experimentation)

Gernot
The font in the environment is opaque though, so there is no way of getting anything out of it. I can only change it.

Jake (Apple)
It also depends on your use case, if you’re trying to match the user’s experience in an app (using their preferred dynamic font size) it can be very tricky. But since this is a Canvas it’s not clear what you’re going for just based on the question

Gernot
An approach I considered would be to resolve a custom symbol in a context that has 27 variants I can recognize somehow and then use that info for custom drawing. But that is WAY too hacky for my taste...

Jake (Apple)
But the API request of “let me introspect a font from the environment” is a totally reasonable feedback request :smile:

Gernot
The use case is for example to draw a custom battery symbol with the real charge level and not have 100 symbols for that.

Jake (Apple)
I see, so using the SF Symbol for empty battery and drawing the interior rectangle yourself?

Jake (Apple)
Or a custom symbol for most percentages?

Gernot
Drawing the rectange myself. The battery is just an example, in reality I have a lot more things to draw with continuous status.

Gernot
I'm doing a home automation app that uses custom SF symbols and want a window covering to represent its opening state, a garage door to do that, and maybe even animate a fan by spinning it around, all while preserving the style :-) (edited) 

Jake (Apple)
I see, very interesting. And when you say you want to draw in a canvas do you mean the new SwiftUI Canvas view? Or just generally here?

Gernot
The new SwiftUI Canvas. I had hopes this is possible there with ResolvedText since here is no late-resolving issue that I would have if I used regular views (which would be an option if that worked, too)

Jake (Apple)
I gotcha. Yeah, I don’t think there’s a great workaround here — you could just specify the font you want and try to match how it should appear based on the current environment’s dynamic type size and accessibility boldness setting. But it would be really great to capture a feedback with this request, Canvas is still new and this use case is valuable for understanding how it can support more apps!

Gernot
Going from the Canvas.GraphicsContext  to a CGContext with .withCGContext()  is also not an option, because while I can set a CGFont, I can't get it out of there for reading its proeprties? Or can I? (edited) 

Gernot
Submitted as FB9161871

----------

Request ManagerWORKFLOW Yesterday at 1:22 PM
@Regine has asked:
Are there any methods that allow restriction of view orientation to just landscape or just portrait on a per view basis without defaulting  to UIHostingviewcontroller

Curt (Apple)
I’m afraid not currently. :pensive:  That would be a great enhancement request Feedback!

----------

Request ManagerWORKFLOW Yesterday at 1:19 PM
@Jason has asked:
When I put Markdown-formatted text as a String literal in a Text, it formats with nice attribution, but when I pass it in from a variable, it doesn't. Is this a bug, or have I misunderstood something about how Texts take Markdown-formatted Strings?
struct ContentView: View {
    var text: AttributedString = "**Hello**, `world`! Visit our [website](https://www.capitalone.com)."
    var body: some View {
        VStack {
            Text("**Hello**, `world`! Visit our [website](https://www.capitalone.com).")
            Text(text)
        }
    }
}
The first Text renders nicely with bold, code and a link, while the second doesn't - it just shows the Markdown annotations in the string directly.

Curt (Apple)
I think that’s a bug in beta 1. You might try Text("\(text)") to trigger the use of a different initializer.

Jason
Okay thanks! I’ve filed FB9160712, if that helps.

Andrew
Wait - for Text("Some *markdown*"), is the string a plain String or an AttributedString?

Curt (Apple)
On apps linked against iOS 15 and aligned releases, a string literal argument is interpreted as markdown.

Joseph
I've raised a feedback (FB9149206) proposing that the markdown support should be an a new init rather than an overload Text(markdown: I think there will be a lot of confusion otherwise and likely latent bugs. Please consider tweaking that in a future beta.

----------

Request ManagerWORKFLOW Yesterday at 1:19 PM
@Thomas has asked:
Hello,
Is it possible to have a simultaneous DragGesture in an inner view of a ScrollView which doesn't make the ScrollView drag gesture fail?
The DragGesture has a minimumDistance of 0.
It seems it's impossible to scroll the scrollView if the DragGesture is recognized (it's installed as simultaneous and the GestureMask is `.all`).
Is there a workaround?
Thanks!

Jake (Apple)
Howdy! Great question, this is a great case where we could use feedback from you to better understand how folks use-cases vary with gestures and ScrollView. In the meantime, a possible workaround would be to use a UIViewRepresentable where you can wrap a UIScrollView and get access to all its goodies and expose any functionality you need to your SwiftUI hierarchy.

Sam (Apple)
What's the desired behavior? Off-axis scrolling? A drag and drop interaction?

Thomas
Thanks @Jake (Apple). I'm trying to stay in pure SwiftUI as I would like to preserve the possibility of a drawingGroup if performance requires it at some point, and I think the Representable way will prohibit it, even if I'm only laying-out or polling touches, but I may be wrong and it only affect UIViews that are using drawRect?. @Sam (Apple) In my case, these are custom buttons (very intricate shapes, with tap & long press). I'm using the drag gesture to detect if the view is pressed or not, as I need to react accordingly somewhere else (think keys of a piano keyboard). Because I want to long-press, I can't use ButtonStyle directly. I need to use a generic ViewModifier with tap/longpress/isPressed callbacks, and I'm also installing it in a PrimitiveButtonStyle where I trigger the button's tap when the view is tapped. The 0-length DragGesture is the only thing I have found to detect finger's presses. It works well, but if the keyboard is put in a ScrollView, and since all touches are "live", the ScrollView doesn't scroll.

Sam (Apple)
So ideally the behavior would be that you could scroll and trigger these touches simultaneously?

Thomas
Ideally yes. I need the touch to react immediately, but the button itself is only meant to be (long-)pressed "vertically", not dragged (although it would open new perspectives!). Because I'm immediately recognizing the press with the drag gesture, the scrollview is not receiving (or cancelling)  its own gesture. The drag gesture is only a side effect. What I would ultimately need are the onTouch methods of UIView, but I would like to keep my views pure SwiftUI if possible.

Thomas
What I can do in the meantime is to keep a portion of the inner view empty, so the touches are passing through and the ScrollView is getting them. (edited) 

Sam (Apple)
I wonder whether you can trickle down some custom state in a ViewRepresentable by overriding touchesBegan

Sam (Apple)
essentially you want some touchesBegan to give you enough information to determine something like isHighlighted

Thomas
I'm sure I can, as I'm doing this kind of things in my UIKit apps, but my views are quite complex and wrapping them with a drawingGroup used to totally fix my performance issues. I'm afraid I'll get the "Red rectangles of death" if I'm putting an UIView there, but I'll try again as it may affect only UIView's that renders things using drawRect.

Sam (Apple)
We might have to take this as an enhancement request then. As far as I know, Drag is your best bet for determining something like highlight state within the SwiftUI gesture system.

Thomas
Thanks. I'll prepare a feedback then

----------

Request ManagerWORKFLOW Yesterday at 1:16 PM
@florian has asked:
Is it intended that setting a value to a @FocusState property inside a Form does not work? The property stays nil and thus the focus isn't moved e.g. to a TextField inside the form. Using a VStack instead of the form works like a charm.

Taylor (Apple)
Yes, please file feedbacks (if you already haven’t) for any context where @FocusState doesn’t work the way you’d expect. Thanks!

florian
Thanks for the reply! A few other folks have already filed a bugreport/feedback, so I think this should be covered.

Betsy (Apple)
(pssssst you should still file yours anyway!)

Taylor (Apple)
I like to say that every feedback is a vote :slightly_smiling_face:

----------

Request ManagerWORKFLOW Yesterday at 1:16 PM
@Andrew has asked:
Is there any way to get GeometryReader size from another view? I want to replace "???" with the height of "Hello world!".
```
struct ContentView: View {
    var body: some View {
        VStack {
            Text("Hello world!")
                .background(
                    GeometryReader { proxy in
                        Color.clear /// placeholder
                        let _ = print(proxy.size.height) /// 20.333333333333332
                    }
                )
            Text("Height of first text is ???")
        }
    }
}
```

Jake (Apple)
Howdy! Using a GeometryReader in a background of a view ensures the GeometryReader doesn’t grow to be larger than that containing view, but it makes it tricky to bubble its size out. You could do something like this:
struct ContentView: View {
  @State private var height = 100.0
  var body: some View {
    MyView().background {
       GeometryReader { proxy in
          Color.clear
            .onAppear { 
              height = proxy.size.height 
            }
            .onChange(of: proxy.height) {
               height = $0
            }
       }
    }
  }
}
Then you can use your height State property like usual.
:warning: Beware: You must ensure you will not cause a continuous layout loop here, if your layout responds to height changing in a way that causes the GeometryReader to lay out again and cause height to get updated, you can get into a loop!

Samuel
fwiw, we do this frequently & use a preference key to bubble it up. hopefully that doesn't have the same vulnerability.

Gernot
Is this recommended over using a preference or is this a "shortcut" that comes with a downside?

Andrew
Ah thanks @Jake (Apple)! That’s very close to my current solution (https://stackoverflow.com/a/67257488/14351818)
Stack OverflowStack Overflow
SwiftUI - How to get GeometryReader size/height from different View?
How can I access the size of a View from another View? To get the height of the &quot;Hello world!&quot; text, I attached a .background() of GeometryReader to it. For now, I'm just printing the hei...

Jake (Apple)
I think as long as you’re aware of the :warning: gotcha, you can use this technique. I would like to say though that this is becoming a common pattern and we would love feedback on how to improve this experience in SwiftUI — if you explain your use cases in feedback it’ll help the team understand what you’re trying to do!

Samuel
Image(...)
.background(GeometryReader { proxy in
    Color.clear.preference(key: IconSizePreferenceKey.self, value: proxy.size)
})
.onPreferenceChange(IconSizePreferenceKey.self) { iconSize = $0 }, alignment: .top)

Samuel
though, it does appear that the same vulnerability exists if the image's size (in my example) i

----------

Request ManagerWORKFLOW Yesterday at 1:12 PM
@Benjamin has asked:
Hi, I'm trying to implement an interactive media playback timeline (i.e., slider) for my audio player app in SwiftUI. However, when I use a high frequency timer to update the playback timeline, the app and other views become unresponsive :(. How can I implement high frequency SwiftUI view updates, and still maintain a responsive and interactive app?

Curt (Apple)
Thanks for the question! It’s hard to give specific advice without seeing code, so this might be a good question for the Developer Forums. A couple of other useful things to look at:
There’s an Instruments tool for diagnosing why an update is slow.
Check out the new TimelineView for creating views that update at the same frequency as the display. It doesn’t do any good to try to update faster than that, because the display can show intermediate frames anyway.

Benjamin
Should my timer to update the playback timeline be in an @ObservedObject or in the SwiftUI View?

Curt (Apple)
Either can work. I tend to encapsulate logic in the model, but beware that if you’re firing an objectWillChange from your observable object every view that depends on any property of it will be updated.

Benjamin
Currently I have my timer in an ObservedObject and updated a @Published property for the SwiftUI view to observe and then update the slider (timeline).

Curt (Apple)
For something like this, you probably want a very small observable object that just has the timeline update state.

Curt (Apple)
But do check out TimelineView. I think it would be great for this.

florian
Another idea could be to maybe animate the change and stop the animation when needed? I could imagine this working.

Benjamin
Ok, also how could I update the playback timeline based on screen refresh rate (CADisplayLink)?

Curt (Apple)
That’s what TimelineView does,

Benjamin
Thanks but I believe that’s new and I need to support the last 2 versions of iOS

----------

Request ManagerWORKFLOW Yesterday at 1:12 PM
@Alexey has asked:
By default the title of .newItem is "New Window". How I can customize it? For example "New <AppName> Window"

Jeffrey (Apple)
We will use the title of the WindowGroup in the menu item, if you provide one. For example:
WindowGroup("Viewer") {
    ...
}
Will give you a menu item titled “New Viewer Window”.
This title will also be used for the default window title, which can be changed with navigationTitle(_:).

Alexey
Thank you! And one more question: Can I add multiple .newItem like in Xcode for example where “New” is menu group that contain many different options?

Jeffrey (Apple)
This will happen if you have multiple WindowGroup scenes in your app, and the additional ones have a title provided

Alexey
Wow) It’s cool

Alexey
But how I can localize it? I mean “New” and “Window” will be localized automatically?

Jeffrey (Apple)
there is an initializer that takes a Text which you can use for the localized version

Jeffrey (Apple)
Oh, i should also note that what I wrote above would use the localized key “Viewer” by default.

Alexey
Awesome! Thank you!

Alexey
So do I understand correctly that I cannot remove “New” and “Window”?

Alexey
I mean I cannot fully replace “New <Title> Window”? For example just “New <Title>“?

Jeffrey (Apple)
I don’t believe so at the moment, but please file a feedback for this.

Alexey
Thank you! I’ll file a feedback

----------

Request ManagerWORKFLOW Yesterday at 1:08 PM
@Thomas has asked:
Hello,
When using TCA, a new instance of `ObservableObject` (the `ViewStore`) is frequently installed as `@ObservedObject` when the view tree invalidates.
What are the consequences of vending a new instance (possibly with the same properties' values) in terms of performances?
Would it be absolutely better to reuse the same instance if possible, or is it acceptable as `@ObservedObject` installation is quite efficient?
Thanks!

Curt (Apple)
I can’t speak to a third party framework, but in general if the observable object is replaced, every view that has a dependency on it must be re-rendered. Check out the talk Demystify SwiftUI for more details on dependencies.

Chang
I’m also writing a question about this. Let’s see this:
struct ContentView: View {
    class DataSrouce: ObservableObject {
        @Published var v1 = 1
        @Published var v2 = 2
    }
    @StateObject var data = DataSrouce()
    var body: some View {
        VStack {
            Text(data.v1)
            Text(data.v2)
            Button("v1") { data.v1 += 1 }
            Button("v2") { data.v2 += 1 }
        }
    }
}
When I change v2's value, actually the second Text is the only one will be re-rendered. But It seems that Curt is saying every view will be re-rendered.
(Also: https://wwdc21.slack.com/archives/C0246E5AEEL/p1623268367097600)
So I’m confused… (edited) 

Request ManagerRequest Manager
@Majid has asked:
I have a class Store<State, Action>: ObservableObject that holds the whole app state. It lives as @StateObject in the root of the App lifecycle and passed via environment to all views. View send actions to the store and update as soon as store's state updated. It allows me to keep the app consistent. Could you please mention any downsides of this approach from your prospective?
Thread in swiftui-lounge | Jun 9th | View message

Chang
Or are you saying, for example, there is a another view depend on a ObservableObject, when object fire a change notification, even the all children view remain the same and will not re-rendered, the behavior of checking all value changed or not is expensive?

Víctor
@Chang In your example you’re only changing a property OF the object that it’s actually the ObservableObject. I think he’s saying that every time you change the whole observable object SwiftUI needs to re-render the whole view. How to change it? Either by setting it or maybe if you receive it via an init the parent can send a different one when needed.

----------

Request ManagerWORKFLOW Jun 10th at 3:59 PM
@Tristan has asked:
The `Canvas` looks like a great new addition.
I'm wondering about using it to render a single drawn surface that can be nested in a `ScrollView` which is then panned, zoomed into etc.
Is this a reasonable solution and in terms of performance, will there be any guidelines on how far to push it?
I intend to put a whole bunch of images as well as other shape data in there.

Curt (Apple)
This sounds like a good application for Canvas.
Like anything, performance will depend on how far you push it and the hardware it’s running on. I’m afraid that’s not a very actionable answer, but every app is different.

Curt (Apple)
Also see this thread that has a workaround for a potential issue in beta 1: https://wwdc21.slack.com/archives/C0246E5AEEL/p1623350997483400

----------

Request ManagerRequest Manager
@Brenden has asked:
Dumb question here... but I was just playing around with the code in the Advanced Graphics section of Whats new in SwiftUI. Taylor showed a symbols browser.... I copied the code and when I run the performance is really bad... he showed the smooth gesture with the fisheye and the timeline view animation... on my side it is super jerky with seconds delay to render... is that right?
Thread in swiftui-lounge | Jun 10th | View message

Tristan
Thanks @Curt (Apple), are there any further docs on Canvas we can find?

Curt (Apple)
The API documentation is here: https://developer.apple.com/documentation/swiftui/canvas/

Curt (Apple)
The talk “Add rich graphics to your SwiftUI app” supports the copy code feature too, so you can grab some fun snippets to play with.
Request ManagerWORKFLOW Jun 10th at 3:58 PM
@Jon has asked:
If we break our Views into separate some View properties to help readability, is there much cost to marking those other properties as ViewBuilders to get the nicer syntax? Is that something we need to worry about?

Sam (Apple)
Nope, in fact, we encourage you to do so! Using the @ViewBuilder syntax helps nudge you towards structuring your code in a way that SwiftUI can make use of intelligently, so using it in more places is never a problem. Check out the talk, Demystify SwiftUI for more on this! (edited) 
Request ManagerWORKFLOW Jun 10th at 3:58 PM
@William has asked:
Is it safe to employ multiple `TimelineView` with the `animation` schedule or is it equivalent to instantiating a number of `CADisplayLink`s? I was thinking of the adage around “reusing” `CADisplayLink`s as much as possible.

Josh (Apple)
Yes! You should be able to use as many TimelineView as appropriate to get your interface behaving how you want. SwiftUI will take care of scheduling things so they update like you want.

William
Perfect! Thanks!

Josh (Apple)
The thing to be careful of is to not have too much "different" between each update of the timeline content.

----------

Request ManagerWORKFLOW Jun 10th at 3:49 PM
@Brenden has asked:
Dumb question here... but I was just playing around with the code in the Advanced Graphics section of Whats new in SwiftUI. Taylor showed a symbols browser.... I copied the code and when I run the performance is really bad... he showed the smooth gesture with the fisheye and the timeline view animation... on my side it is super jerky with seconds delay to render... is that right?

Taylor (Apple)
Hey @Brenden, sorry about that! That’s a known issue in beta 1.
As a quick workaround to see the same smooth effect today, you can manually cache the resolved images. (edited) 

Brenden
Oh interesting! Is that on the context?

Brenden
Or a pointer to how to cache those?

Taylor (Apple)
One thing you could try is moving that resolution to be outside of the inner for loop, so it only happens once. (cheating since for the code snippet it only uses the swift bird rather than every symbol like my demo had :sweat_smile:).

Brenden
Thanks @Taylor (Apple)! I will give it a try!

----------

Request ManagerWORKFLOW Jun 10th at 3:45 PM
@Jason has asked:
What's the recommended way to share SwiftUI code between multiple platform targets? Recent Xcode multiplatform templates simply make source files members of multiple targets, but a few years ago the recommendation for sharing code between e.g. an app target and an app extension was to create a shared dynamic framework (e.g. MyApp, MyAppExtension and MyAppKit). What would be the pros and cons of either approach?

Curt (Apple)
It really depends on the complexity of your particular app.
The templates are the fastest way to get started and aim to minimize complexity. A shared dynamic framework is a great approach as your app grows.

Jason
How about dynamic frameworks vs. SPM packages?

Curt (Apple)
I believe an SPM package can produce a dynamic framework now, but that’s outside my expertise. It might be a good question for the DevTools Lounge or a Swift lab though!

Jason
Thank you!

----------

Request ManagerWORKFLOW Jun 10th at 3:41 PM
@Adrien has asked:
When an observedObject is passed into a view, does SwiftUI differentiate between views that actually use it (the object is used in the body) and 'intermediate' views (which just pass that object to a child? )? Or are all views just invalidated?

Luca (Apple)
Yes, there is a difference. If you don’t use any of the ObservableObject property wrappers (@StateObject, @ObservedObject ) the view would not observe and update the instance. So you you just need to pass an ObservableObject through some intermediary view just make it a regular property on the view but make sure to use the property wrapper if you ever read any of the value in the view, otherwise your view will no be consistent with your data.

Adrien
Excellent. It seems obvious when you say it! :)
thank you!

Luca (Apple)
Also, @EnvironmetObject is a great tool when you have an ObservableObject that you want to pass down multiple levels of your view hierarchy without having to manually do it every step of the way.

Adrien
Yes, I was trying to see if they behave differently, but if we pass the observableObject as a regular property, then we get the same result.
I have a project in which the environmentObject is not correctly transmitted ("view environmentObject may be missing") to the destination of a NavigationLink (a multi-destination programmatic navigation).

----------

Request ManagerWORKFLOW Jun 10th at 3:39 PM
@Thomas has asked:
What is the recommended architecture when using SwiftUI?
In a lot of the demos (and this is probably my inexperience showing) it seems that the business logic leaks into the view.
Would you recommend using MVVM for example and how would you set that up?

Curt (Apple)
Thanks for the question!
Josh S. gave a great answer to this in the Q&A yesterday:
For me the most important thing is that you have a software architecture in mind that works well for you, and helps you craft maintainable apps with a good separation ways to achieve that, but they’re by no means the only one. If you’ve got a well-considered architecture that works well for you, I think that’s great

Curt (Apple)
 and helps you craft maintainable apps with a good separation ways to achieve that,”

Curt (Apple)
(Not good to cut off your boss in mid-sentence. :laughing: )

Thomas
:joy:  Thanks!
Have you tried MVVM with SwiftUI?

Curt (Apple)
That’s a great follow-up. Hopefully other members of the community will chime in here!

Tim
we use VMs (as ObservableObjects) in a large project purely in SwiftUI. it works fine. the routing still remains in View though, mainly because of NavigationLink Views (edited) 

Samuel
there's a lot to be said for "SAM", too (state-action-model)

Samuel
architecture is like salt ... none is as bad as too much :zany_face:

Tim
SAM is uni-directional?

Samuel
it's cyclical - the view emits actions which affect the model which affects the view

Samuel
it's a good way to ensure there's no "logic" embedded in the views

Tim
yes.

Thomas
Ohh interesting I will take a look at SAM :male-detective: .  Thanks!

Tim
any must-read articles on SAM?

Samuel
it's very common in web reactive frameworks. the guys at https://www.pointfree.co have done a bunch of videos on applying it to swiftui, too.
pointfree.copointfree.co
Point-Free: A video series on functional programming and the Swift programming language.
Point-Free is a video series exploring functional programming and Swift. (30 kB)
https://www.pointfree.co/

Tim
so it's the same as Composable Architecture?

Samuel
composable architecture follows that pattern, yeah.

Samuel
though you don't need to go all the way to the reducers they use - the main idea is to send events to something than can translate them to model mutations & side effects which in turn update the view.

Samuel
composable architecture is very cool, but it can be a huge pill to swallow all at once, especially if you aren't super into FP.

Chang
Note that there was a discussion about TCA yesterday:
https://wwdc21.slack.com/archives/C0246E5AEEL/p1623268367097600 (edited) 
Request ManagerRequest Manager
@Majid has asked:
I have a class Store<State, Action>: ObservableObject that holds the whole app state. It lives as @StateObject in the root of the App lifecycle and passed via environment to all views. View send actions to the store and update as soon as store's state updated. It allows me to keep the app consistent. Could you please mention any downsides of this approach from your prospective?
Thread in swiftui-lounge | Jun 9th | View message

----------

Request ManagerWORKFLOW Jun 10th at 3:38 PM
@Yueran has asked:
Could we use .prominent Window Scene Presentation Style in SwiftUI?

Jeffrey (Apple)
Hi, we do not have support for this, but would love a feedback with any specifics you could provide about your use case.

----------

Request ManagerWORKFLOW Jun 10th at 3:37 PM
@Chang has asked:
If I have to embed a SwiftUI View into a UIViewController to do something only available for UIViewController (like customize appearance that SwiftUI not support), is there any problem about the following two way?
1. Create a UIHostingController<MySwiftUIView> A, add A's view as a subview to my own UIViewController B's view. (of course do some layout and `addChild` `didMove` stuff)
2. Inherit UIHostingController<MySwiftUIView> directly to override some VC methods

Josh (Apple)
Either approach is fine! Please do file feedback though about what you're trying to achieve that requires wrapping the SwiftUI content like this.

----------

Request ManagerWORKFLOW Jun 10th at 3:34 PM
@William has asked:
Why does a `UIViewRepresentable` update once after `makeUIView` and once before `dismantleUIView`?

Raj (Apple)
The update function can be called for a number of reasons. It will be called at least once after make as the UIView becomes extant. It may be called multiple times before the UIView is eventually dismantled. You should not rely on any frequency (or lack thereof) of update calls.

William
@Raj (Apple) I have a UIViewDiffableRepresentable that conforms to Hashable to check whether properties have effectively updated and therefore prevent the updateUIView call to go through to expensive logic. Is it overkill? Is there a more sensible approach? (edited) 

Raj (Apple)
It's overkill— the framework is able to call updateUIView when properties outside of the representable struct have changed, like the environment. So, you'll probably drop updates on the floor with this approach.

William
Thanks @Raj (Apple), much appreciated.

----------

Request ManagerWORKFLOW Jun 10th at 3:30 PM
@William has asked:
How do we avoid incurring in `Bound preference SizePreferenceKey tried to update multiple times per frame`?

Curt (Apple)
It sounds like you have a cycle in your updates. For example, a GeometryReader that writes a preference, that causes the containing view to resize, which causes the GeometryReader to write the preference again.
It’s important to avoid creating such cycles. Often that can be done by moving the GeometryReader higher in the view hierarchy so that it’s size doesn’t change and it can communicate size to it’s subviews instead of using a preference.
I’m afraid I can’t give any more specific guidance than that without seeing your code, but hopefully that helps you track down the issue!

William
Damn, I see. I have a complex thing going on with frame capture, offsetting, and keyboard changes, so I’m sure I’m in for a ride, haha. Thanks! (edited) 

----------

Request ManagerWORKFLOW Jun 10th at 3:25 PM
@Víctor has asked:
When using View.frame(minWidth:, idealWidth, maxWidth:…) are there any combinations of parameters that are more performant that others? Any combination to avoid?

Josh (Apple)
There isn't really any performance difference between any combination of parameters. You should just use the appropriate values to get the layout you're looking for.

Tim
what's the best way to enforce a specific size? min + max? or ideal? or all?

Josh (Apple)
You would want to use the other version of .frame for that which just takes a width and a height. View.frame(width:,height:)

Víctor
Does this also apply for when specifying a maxWidth/maxHeight of .infinity?

Víctor
I’ve seen some people specifying minWidth of 0 too because it seems to improve a bit the performance (for example the nice guys from objc.io in this episode: https://talk.objc.io/episodes/S01E253-flow-layout-revisited).
talk.objc.iotalk.objc.io
Flow Layout Revisited
We revisit our SwiftUI flow layout implementation from 1.5 years ago and write a simpler and more correct version. (28 kB)
https://talk.objc.io/episodes/S01E253-flow-layout-revisited

Víctor
Thank you very much for the response!

Josh (Apple)
specifying an infinite max width just means that the view will try to take up all the space it is offered.

Josh (Apple)
By setting a minimum width of 0 and a maximum width of .infinitiy you're making the view completely flexible, which potentially allows SwiftUI to take some shortcuts with the layout calculations. I wouldn't expect it to be massively different performance wise though. Please file a feedback with a sample where that is happening if you happen to run into it!

----------

Request ManagerWORKFLOW Jun 10th at 3:25 PM
@Michael has asked:
Is there any way to set/control backButtonDisplayMode from SwiftUI? By the way, thanks for all the great new features :star-struck:

Curt (Apple)
Thanks for the question. I’m afraid there’s no SwiftUI API for this currently.
If you could file an enhancement request Feedback, that would really help me prioritize that work though!

----------

Request ManagerWORKFLOW Jun 10th at 3:20 PM
@Natanel has asked:
Can you explain the AttributeGraph that comes up while debugging sometimes?

Curt (Apple)
I’m afraid we can’t discuss implementation details, but be sure to check out the talk “Demystify SwiftUI” for the details of the dependency graph. https://developer.apple.com/wwdc21/10022
Apple DeveloperApple Developer
Demystify SwiftUI - WWDC 2021 - Videos - Apple Developer
Peek behind the curtain into the core tenets of SwiftUI philosophy: Identity, Lifetime, and Dependencies. Find out about common patterns,... (12 kB)
https://developer.apple.com/wwdc21/10022

Curt (Apple)
It’s a great talk and should help provide intuition on how things work.

Curt (Apple)
Also, dogs and cats!

Natanel
Awesome, thanks! :dog::cat:

----------

Request ManagerWORKFLOW Jun 10th at 3:16 PM
@Wilson has asked:
Is there a way to disable pixel rounding in SwiftUI? The hover effect from my OS X Dock yesterday is jittery because padding is being applied to many views in a row, but rounded to the nearest pixel for each view. This inaccuracy in padding adds up, making the entire view jitter by a few pixels whenever I move the mouse.

Josh (Apple)
SwiftUI layout is always rounded to the nearest pixel. But using any GeometryEffect won't take on the snapping behavior. Things like .offset and .scaleEffect are existing ways to achieve this, but you can also implement your own GeometryEffect if you need something custom.

Wilson
I'll give it a shot, thanks!

Wilson
@Josh (Apple) How about .frame?

Josh (Apple)
.frame is a layout modifier and not based on a GeometryEffect

----------

Request ManagerWORKFLOW Jun 10th at 3:10 PM
@Chang has asked:
In most cases, the layout behavior with `Spacer` can be replaced with `.frame(maxWidth:,alignment:)` (or height)  seamlessly. Since Spacer is an actual View that is arranged within the view hierarchy, using Spacer will consume more memory and cpu resources. And Demystify SwiftUI also says "modifier is cheap".
So should I use `.frame` instead of `Spacer` as much as possible?

Josh (Apple)
While Spacer is a view, it doesn't end up displaying anything of its own so it is plenty lightweight. Using .frame can have other behavior introduced to the way the view gets laid out beyond just changing its size. They both have their uses, so use them each where appropriate.

Sam (Apple)
To add a little more onto this, even in cases where you will get almost entirely the same behavior between the two, the performance difference will be so minimal that I would strongly suggest prioritizing code readability over performance / memory use to make this decision. If Spacer makes it more clear what layout you’re trying to specify, use that, and vice versa.

Chang
Yeah I can get it exactly:grinning: always argue with my colleague which one is more “readable”, seems it is just a code style problem. Thanks Josh and Sam!

Chang
BTW I also submit a problem about how to add different size spacers to a stack.
Use many Stack, or .padding, or Spacer().frame, It is a readable problem likely. Please ignore it. (edited) 

----------

Request ManagerWORKFLOW Jun 10th at 3:08 PM
@Christopher has asked:
Does SwiftUI expose enough API that would allow us to build our own `Lazy{H,V}{Stack,Grid}` with a fully custom layout, or are there still a lot of "magical bits" under the hood that prevent us from doing so?

Sam (Apple)
Unfortunately, we don’t offer support for building custom layouts today.

Christopher
Is it cool for us to keep doing wacky things with GeometryReaders + Preference values to achieve this sort of thing in the meantime? :stuck_out_tongue:

Christopher
(The main chords view in this 90 second video—minus the popover’s content—is all done w/ SwiftUI: https://vimeo.com/manage/videos/548110430)

Cameron
@Christopher this looks like a private video

Christopher
Oops, thanks for the heads-up! https://vimeo.com/548110430

Cameron
…and obviously I didn’t look at the URL close enough :laughing:

Víctor
@Christopher I suppose the thing that’s harder to do is the lazy part of loading cells

----------

Request ManagerWORKFLOW Jun 10th at 3:04 PM
@Linus has asked:
What is the handlesExternalEvents modifier? I’ve seen it used, but don’t know what it is.
9 replies

Jeffrey (Apple)
This modifier allows you to specify a Scene to be used when external data is sent to the app - a URL or an NSUserActivity . For example, on macOS, when a url comes in that matches the pattern, we will either create a new window for that Scene, or use an existing one, if a view has been modified with handlesExternalEvents to prefer that incoming value.

Alexey
About that. In my case I always get a new window when I use handlesExternalEvents . How I can tell system to use already existed window and not to create another one?
WindowGroup {
      ContentView2()
    }
    .handlesExternalEvents(matching: ["testurl://open"]) (edited) 

Linus
So is that like onOpenURL, but for scenes?

Jeffrey (Apple)
You can apply the view modifier with the preferring: parameter - if an existing window prefers the incoming value, we will use that rather than creating a new one.

Jeffrey (Apple)
Depending on your use case, you may wish to use this in tandem with onOpenURL.

Linus
How so?

Jeffrey (Apple)
The handlesExternalEvents modifiers are a way to tell the system which Scene to choose, if you have more than one. onOpenURL will get the actual data, though.

Linus
oooh, that makes sense! Thanks!

Alexey
@Jeffrey (Apple) Thank you for preferring: ! Now it works perfectly.

----------

Request ManagerWORKFLOW Jun 10th at 3:01 PM
@Luis has asked:
Is there a way to customize NavigationView's navbar other than `UINavigationBar.appearance`?

Sam (Apple)
Unfortunately, there isn’t any SwiftUI native way to do this right now. If this is something you want, please file a feedback report requesting the feature!

Luis
Absolutely, will do thanks!

Víctor
Hi @Luis :P

Luis
@Víctor hey man! saw your answer on the ViewStore thread :ok_hand:

----------

Request ManagerWORKFLOW Jun 10th at 2:58 PM
@William has asked:
The `State` documentation states “It is safe to mutate state properties from any thread.” What does it refer to considering that SwiftUI complains with runtime warnings when a `PassthroughSubject` published from a non-main thread?

Luca (Apple)
State is thread safe and can be mutated from any thread.
When you mention PassthroughSubject I would imagine you are using that in the context of an ObservableObject with either one of @StateObject, @ObserverdObject, or @EnvironmentObject . ObservableObject does require that you mutate all the properties observed by the view, and publish objectWillChange on the Main Thread.
I would recommend you check out Discover Concurrency in SwiftUI where my colleague Curt and Jessica talk all about Swift and concurrency https://developer.apple.com/videos/play/wwdc2021/10019/
Apple DeveloperApple Developer
Discover concurrency in SwiftUI - WWDC 2021 - Videos - Apple Developer
Discover how you can use Swift's concurrency features to build even better SwiftUI apps. We'll show you how concurrent workflows interact... (27 kB)
https://developer.apple.com/videos/play/wwdc2021/10019/


William
I am using it with onReceive and a CurrentValueSubject to set a State within a modifier. Should I file a feedback? (edited) 

William
@Luca (Apple) I’ll mention you just in case you haven’t seen my reply. Thanks!

Luca (Apple)
I see. Yes, currently onReceive expects you to publish on the main thread.

Luca (Apple)
is there are reason why you could not hop on the main thread?

Luca (Apple)
In general, notifying and do mutation for code that interact with the UI on the main thread is going to avoid you a lot of headache

William
No, not particularly. I hadn’t dug in to understand whether it was onReceive or State itself so I thought I’d ask! Thanks!

----------

Request ManagerWORKFLOW Jun 10th at 2:57 PM
@Samuel has asked:
Is there a way for a view to know when the window it is hosted in is key or not on macOS?

Jeffrey (Apple)
Could you elaborate some on what you’re trying to achieve? There is the controlActiveState property on the Environment, but there is also focusedValue(:_,:_) and @FocusedValue which are used in the context of the key window on macOS.

Samuel
track when a window that has no "focusable" controls becomes key. i wasn't aware of controlActiveState ... i will try it out (hoping it works for the "root" view of a key window) (edited) 

Samuel
thank you!!!
i just tested & it does update as expected.
maybe a little bit of a discovery issue with swiftui. i had never run across that environment property before & how it can be used.

Jeffrey (Apple)
I see. This can be useful if you are building a custom control that needs to change its appearance based on the window active state.

Samuel
... or may i just haven't studied the docs well enough :wink:

----------

Request ManagerWORKFLOW Jun 10th at 2:52 PM
@Rhys has asked:
Is there a way to disable the scrolling on a List so I can use it within a ScrollView? I have a ScrollView, inside which I'm placing an Image, some Text, and then I would like to be able to place a List. However, currently, the List doesn't appear unless I give it a fixed frame size, and the List is also separately scrollable. Is there a way around this?

Curt (Apple)
Thanks for the question!

Curt (Apple)
I’m sorry, but that’s not currently supported. :pensive:
If you would be able to file an enhancement request Feedback with your use case, I’d really appreciate it! I know Feedback can seem like a black box (sorry about that), but they really do help us, even if we can’t respond directly to every request.

Rhys
OK, no problem. I think I can use ForEach for now, but I’ll file a request!

----------

Request ManagerWORKFLOW Jun 10th at 2:51 PM
@Richard has asked:
Can items in a list accept drop items? It seems to immediately crash my app.

Jeffrey (Apple)
Could you please file a feedback for this crash? If you can also include a sample that reproduces the issue, that would be especially helpful.

Richard
I had an open one (FB8031799) from iOS 14 that I’ve updated for you. Thanks!

Jeffrey (Apple)
Excellent, thank you!

Joshua
On iOS 14, it doesn’t crash, but it also doesn’t work. I filed something back in March about that, too. FB9061764
Request ManagerWORKFLOW Jun 10th at 2:51 PM
@Richard has asked:
Is it possible to trigger keyboard shortcuts on buttons in SwiftUI Menus? I've tried a few methods and can't seem to get it working. Filed as FB8895536.
struct ContentView: View {
    @State private var showColor = false
    @State private var showText = false
    var body: some View{
        NavigationView{
            Color.yellow
                .frame(width: 200, height: 200)
                .cornerRadius(10)
                .navigationBarTitle("Keyboard")
                .sheet(isPresented: $showColor){
                    Color.yellow
                }
                .sheet(isPresented: $showText){
                    Text("Hello, World!")
                }
                .toolbar{
                    ToolbarItem(placement: .confirmationAction) {
                        Menu{
                            Button("Show Color"){
                                showColor.toggle()
                            }.keyboardShortcut("1", modifiers: .command)
                            Button("Show Text"){
                                showText.toggle()
                            }.keyboardShortcut("2", modifiers: .command)
                        } label: {
                            Image(systemName: "ellipsis.circle")
                        }
                    }
                }
        }
        .navigationViewStyle(StackNavigationViewStyle())
    }
}
5 replies

Harry (Apple)
This should be fixed in the seed of iOS 15.

Richard
Do you mean the next seed of the beta?

Richard
Currently it is not working on iPadOS 15 beta 1.

Harry (Apple)
Oh my mistake, I misread the example. Currently only standalone Oh my mistake. I misread the example. Currently only stand alone buttons or toggles work with the keyboard shortcut modifier. Menus, buttons within a menu are not currently supported, though a feedback detailing this request would always be helpful!

Richard
Ah, thats unfortunate. Thank you for the response though! Here is the feedback number: FB8895536

----------

Request ManagerWORKFLOW Jun 10th at 2:40 PM
@James Michael has asked:
If we create custom property wrappers that embed existing ones (like State, ObservedObject, etc) does SwiftUI still "see" those embedded wrappers and do the right thing?
For example, can I create an `@Whatever` wrapper as a convenience for `@Environment(\.whatever)` and still expect that to work the same way?

Luca (Apple)
Yes, you can make do that. As long as you add conform to the DynamicProperty to your wrapper this will work.

James Michael
Thanks Luca! I didn't know about that protocol.
Would I also need to implement update() or is the default impl sufficient? (edited) 

Luca (Apple)
No need to implement the update() requirement.

Chang
When implementing DynamicProperty  to my custom property wrapper, only those have SwiftUI’s property wrapper (like State, ObservedObject, etc) will trigger SwiftUI view’s update, isn’t it?

Josh (Apple)
Or any other DynamicProperty . State ObservedObject and company all implement the DynamicProperty protocol as well.

Chang
For example, I want to make a property wrapper called OptionalObservableObject , that when optional state change or internal observable object fire a change notification, this wrapper will trigger SwiftUI update. But I thought I cannot do it.

Chang
Oh that’s it. So I cannot implement DynamicProperty by myself.

Josh (Apple)
Your DynamicProperty should be implemented in terms of existing DynamicProperties, correct

----------

Request ManagerWORKFLOW Jun 10th at 2:36 PM
@Samuel has asked:
without having to jump to ios15 for focusedSceneValue, is there a recommended way for non-document windows ina window group to surface a kind of "current object" that can be used to activate/deactive menus & send commands to, even if no editable control as focus? (in swiftui)

Taylor (Apple)
Good question! focusedSceneValue provides a way for the current focused / key window to surface its values to @FocusedValues in menus and other places; this is especially important on macOS since an app can have many windows, but only one of those is key.
As for other approaches, it somewhat depends on your use case: if you do need your current object to be tied to the key window specifically, there isn’t a substitute. But if you more want to aggregate information across all of your windows, you could use things like preferences and the environment to manually pass that data around

Samuel
my need is key window based; thanks, that makes sense :thumbsup:

Samuel
how does a window in swiftui know if it's key?

Taylor (Apple)
There is some internal state tracking that

----------

Request ManagerWORKFLOW Jun 10th at 2:34 PM
@Abizer has asked:
I have a framework that vends a SwiftUI View to the main app via a HostingController. The view handles everything it needs internally, so all the types are internal. The only public method is the one that vends the HostingController. In order to maintain the isolation I do it this way:
`return UIHostingController(rootView: AnyView(SchedulesView(store: store)))`
Is this a correct way to use `AnyView`

Taylor (Apple)
Yes, that’s an OK usage, particularly because it’s at the base of the hierarchy view and not used to add dynamism.
But there are other ways to encapsulate the exact type of the hosting controller, for instance returning an upcast or custom protocol type
Returning it typed as UIViewController instead its actual `UIHostingController<..>` type
Creating a protocol with the extra API that clients might expect from the view controller, and returning it typed as that
Or by using a container UIViewController that has a child of your hosting controller

Sam (Apple)
^^ just wanted to chime in to say, fantastic answer to this one

Abizer
Ah. Ta very much! The first one is so obvious now I see it!

Abizer
And, (I think) I can remove the dependency on SwiftUI in the calling module as well.

Taylor (Apple)
That is another great benefit

----------

Request ManagerWORKFLOW Jun 10th at 2:30 PM
@Jason has asked:
When I've needed to inject data into a detail view, but still let the view have ownership of its StateObject, I've used the StateObject(wrappedValue:) initializer directly in my view initializer, for example:
public struct PlanDetailsView: View {
    @StateObject var model: PlanDetailsModel
     public init(plan: Plan) {
        self._model = StateObject(wrappedValue: PlanDetailsModel(plan: plan))
    }
   ...
}
Is this an acceptable use of the initializer? I know StateObject is only supposed to initialize at the start of the View's lifetime, and not on subsequent instantiations of the View value, so I want to make sure I'm not forcing it to re-allocate new storage each time the View is re-instantiated.

Luca (Apple)
Yes, this is an acceptable use of the initializer and your understanding is correct: that object will be create only at the beginning of the view lifetime and kept alive. The StateObject ’s wrapped value is an autoclosure that is invoke only once at the beginning of the view lifetime. That also means that SwiftUI will capture the value of plan when is firstly created; something to keep in mind is that if you view identity doesn’t change but you pass a different plan SwiftUI will not notice that.

Jason
That's exactly what I wanted to hear. Thank you so much!

Jason
However, may I suggest the documentation might be updated to reflect this? The documentation for StateObject's init(wrappedValue:) states:
You don’t call this initializer directly. Instead, declare a property with the @StateObject attribute in a View, App, or Scene, and provide an initial value:

Luca (Apple)
Thank you for you feedback Jason. In general if you find places where we can improve our documentation you should feel free to submit a feedback for it.

----------

Request ManagerWORKFLOW Jun 10th at 2:29 PM
@Loic has asked:
Hello! I have tried to implement with SwiftUI a common feature in iOS apps that is when tapping again a tab item of a TabView with a nested NavigationView, it pops to the root view of the navigation view. Using presentationMode.wrappedValue.dismiss() it just chains the view dismiss, any idea of how to implement this in a more clean way ? (mine feels "hacky")

Curt (Apple)
Thanks for the question! I’m afraid I don’t have a great answer here, but there are a couple of options you can try.

Curt (Apple)
One option is to use a representable to embed a UITabBarController, so you can hook the delegate methods.

Curt (Apple)
Another option, if you can detect when the user taps the same SwiftUI tab again, is to decorate your NavigationView with .id(counter), where counter is @State private var counter = 0.

Curt (Apple)
Then when the user taps the same SwiftUI tab again, you can increment counter, which changes the identity of the navigation view, causing SwiftUI to replace it.

Curt (Apple)
I’d love to get an enhancement request Feedback for your particular use case so we can prioritize making this easier!

Loic
Oh thank you very much I am going to try that !

Loic
FB9049105 is the feedback number, I have attached my sample Xcode project with the way I've done which feels a bit hacky

Curt (Apple)
Thank you!!!

Kody
I've had luck with option #2 in our production app

----------

Request ManagerWORKFLOW Jun 10th at 2:26 PM
@Jon has asked:
How can I control the ideal size of a UIViewRepresentable View? I have a lot of trouble getting correct automatic sizing of wrapped views, especially if they wrap UIStackView. Any recommendations for getting proper automatic sizing so I don't need to use fixedSize so much?

Raj (Apple)
Try implementing intrinsicContentSize on your view.

Jon
I do, usually providing no intrinsic width but with a height calculated from the stack. This works, but still falls afoul of things like resizing in Stacks when other elements resize.

----------

Request ManagerWORKFLOW Jun 10th at 2:26 PM
@Alexey has asked:
Is there any way to open additional window from SwiftUI Life cycle? I mean call additional WindowGroup. For example Inspector panel.

Jeffrey (Apple)
Hi - we currently do not have any API for this, though we’d love if you could file a feedback with any specifics you have for your use case. One option for something like an inspector panel is that you could use NSApplicationDelegateAdaptor, and open your window by communicating with that. A secondary WindowGroup might not be the best match for something like an inspector panel, since WindowGroup supports multiple windows, and will should up in the File -> New menu.

Jeffrey (Apple)
Oh, I should mention that the window created via the delegate adaptor would be an NSWindow instance, with an NSHostingView as the contentView.

Alexey
Thank you! Previously you suggest to use NavigationLink in a commands context to open a new window. I have tried and it works. It looks a little tricky. It’s good solution or is it better to avoid it?

Jeffrey (Apple)
Yes, that is also supported - we will open a new window with the destination view as the content. This could also be a good fit for your case, since it will only ever make one window for that destination (it will be brought to the front if its already open and the user selects the menu item again)

Alexey
Superb! Thank you!

Alexey
And is there any way to make WindowGroup open only single window? Or this is the only way CommandGroup(replacing: .newItem, addition: {})

Jeffrey (Apple)
No, the design of WindowGroup is to support multiple windows on platforms that support it (iPadOS and macOS). What you have there will effectively remove the menu item. The problem with this approach is that if the user closes the window, they will not have an easy way to get it back, short of clicking the dock icon. If your app is one that makes sense to only have one window, we would certainly love a feedback about that, though.

Alexey
Thank you!

Alexey
One more question about using NavigationLink . It works when I put it into .commands . Is it possible to add it to toolbar. I was try this
.toolbar(content: {
        NavigationLink("Test", destination: Text("Hello, world!").padding())
      })
But the button is disabled in the toolbar. (edited) 

Jeffrey (Apple)
I do not believe we support that, though feedbacks are always welcome for this as well :slightly_smiling_face:

Alexey
Thanks!

----------

Request ManagerWORKFLOW Jun 10th at 2:23 PM
@Aimin has asked:
For when using @EnvironmentObjects, it seems like I need to pass the .environmentObject modifier for every layer of subview. If I don't do that, it will give error "view environmentObject may be missing as an ancestor of this view"
But I thought the point of Environment Objects is to make data available to all view without writing a lot of code. Is that a design choice or am I doing something wrong?

Curt (Apple)
Thanks for the question. .environmentObject(…) mostly flows down the view hierarchy, however there are some places where we intentionally do not forward it.
For example, the destination of a navigation link does not get the environment object, because there is a conflict as to whether the destination should get the object from the originating link or the placeholder of the destination, or even the previous view on the stack.

Curt (Apple)
There was also a bug where sheets and popovers didn’t get the environment object, but that was fixed.

Curt (Apple)
If you find other places where environment object does not propagate as expected, please file a Feedback. It’s important to me that we get this right!

Matthew
Ah, I did think sheets and popovers did not receive it by design!

----------

Request ManagerWORKFLOW Jun 10th at 2:22 PM
@Rhys has asked:
Is there a way to control the opacity/overlay effect applied to a Menu's label in iOS? Menu currently applies a high-opacity white overlay (I assume!) on its label when tapped, and I'd like to make it less opaque/override the effect entirely.

Taylor (Apple)
Not today, but if you haven’t already please file a feedback requesting the ability to do so.

Taylor (Apple)
Oh, and adding context for why you want to customize that effect is always really useful too!

Jon
Because our designers want it.

Rhys
Thanks, will do. It’s mostly that the underlying button is very hard to see otherwise, while the menu is open.

----------

Request ManagerWORKFLOW Jun 10th at 2:16 PM
@Jon has asked:
Can the new `AtrributedString` be used to provide accessibility notations in SwiftUI like `NSAttributedString`s can in UIKit? Should we report any attributes from `NSAttributedString` we need on `AttributedString`?

Curt (Apple)
AttributedString should have the full suite of accessibility attributes and they should now be standardized across platforms!
But if you see any we missed, please do file Feedback so we can fix any oversights.

Curt (Apple)
Thanks for the question. We’re super excited about the AttributedString support!

Curt (Apple)
Localization, accessibility, formatting, and morphology agreement in one tidy package.

Jon
I was looking for pronunciation control but couldn’t find it. Does it have a different name?

Michael (Apple)
Those are not yet available. But we are very aware of the issue :wink:

Curt (Apple)
Checks watch…

Michael (Apple)
In the meanwhile, there is some new AX API that can be applied to Text itself, such as speechSpellsOutCharacters, accessibilityTextContentType, and more.

Jon
Yes, spells out was needed too. Thanks.

----------

Request ManagerWORKFLOW Jun 10th at 2:14 PM
@Wilmar has asked:
I’ve had a lot of inconsistent behaviour with EnvironmentObject where it isn’t passed in, nil when referenced, etc. Am I holding it wrong, or what could some common pitfalls be with using it? I've reverted to a singleton for global access but I'd rather get EnvironmentObject right.

Sam (Apple)
It’s a little hard to tell exactly what issue you’re running into just from this description, but sorry to hear it’s been causing you trouble! How have you been “holding it”, so to speak?

Kody
I see this too, but usually happens when the view is going away. It's like SwiftUI tries to access my object after its been destroyed and the view should be gone..

Wilmar
My understanding is that you can tag .environmentObject(…) onto any view (typically) a List, and all the subsequent child views would have the benefit of the presence of the object through the @EnvironmenObject property.

Wilmar
Honestly it’s as vanilla as the examples show it, however some lifecycle stages causes this object to not be present. Let me rephrase my question: are there certain tips you can give on what NOT to do with EnvironmentObject @Sam (Apple)?

Wilmar
cc @Luca (Apple)

----------

Request ManagerWORKFLOW Jun 10th at 2:13 PM
@Gernot has asked:
Hi! Thanks for answering questions here! I have an app that needs to hide the home indicator, but that does not seem to be possible in SwiftUI. I know I can do it with exchanging the root ViewController but that has a lot of side effects in a pure SwiftUI app. Is there a better workaround?

Curt (Apple)
Thanks for the question. I’m afraid we don’t have SwiftUI API for this currently. Using UIKit is the best option for now.
If you could submit an enhancement request Feedback, I’d really appreciate it. :pray::skin-tone-3:

Gernot
Thank you. Going back to UIKit for this is unfortunately not an option, since exchanging the rootViewController breaks things like onOpenURL  in a SwiftUI lifecycle app. Unfortunately the standard RootViewController is also not delegating this property to another child ViewController. I just submitted this as FB9155379

Curt (Apple)
Thank you for the Feedback! Much, much appreciated.

----------

Request ManagerWORKFLOW Jun 10th at 2:13 PM
@Kody has asked:
Is it okay to use child CoreData context as @StateObject vars in SwiftUI views, or would you recommend passing those in the environment and holding on to them outside of SwiftUI?

Luca (Apple)
There is not need to use a @StateObject since the context is not an ObservableObject. Passing it down using the environment is a good solution.

Kody
Thank you!

----------

Request ManagerWORKFLOW Jun 10th at 2:08 PM
@Arie has asked:
What’s the best practices for making a SwiftUI view accessible?

Michael (Apple)
You should get a lot of Accessibility automatically. The best way to determine whether you need to make tweaks, using our Accessibility APIs, is to try your view with some of our features, like Large Text, VoiceOver, etc.

Michael (Apple)
You can also take a look at the new Accessibility Inspector in SwiftUI and see what it shows for your Preview view.

Michael (Apple)
In general, system standard controls tend to be accessibly by default, but when you use a lot of Shape or other manual drawing, you may need to do more work.

Nathan (Apple)
Hi Arie. A great place to start is our introduction video from 2019.
https://developer.apple.com/videos/play/wwdc2019/238/
This will introduce you to accessibility in SwiftUI. You could follow that up with this years presentation where we go beyond the basics.
https://developer.apple.com/videos/play/wwdc2021/10119/
We also have many WWDC videos on best practices when making a view accessible. Such as writing great accessibility labels.
https://developer.apple.com/videos/play/wwdc2019/254/
Apple DeveloperApple Developer
Accessibility in SwiftUI - WWDC 2019 - Videos - Apple Developer
Making your app accessible is critical, but just as important is designing a fantastic accessibility experience. Learn what makes a great... (18 kB)
https://developer.apple.com/videos/play/wwdc2019/238/

Apple DeveloperApple Developer
SwiftUI Accessibility: Beyond the basics - WWDC 2021 - Videos - Apple Developer
Go beyond the basics to deliver an exceptional accessibility experience. Learn how to use the new SwiftUI Previews in Xcode to explore... (38 kB)
https://developer.apple.com/videos/play/wwdc2021/10119/

Apple DeveloperApple Developer
Writing Great Accessibility Labels - WWDC 2019 - Videos - Apple Developer
Great accessibility labels are the difference between someone using and loving your app or someone deleting your app. Experience... (14 kB)
https://developer.apple.com/videos/play/wwdc2019/254/


Arie
Thanks so much for your reply Michael and Nathan!  That was really helpful and now I can make my new apps accessible to everyone…:grin:

----------

Request ManagerWORKFLOW Jun 10th at 2:06 PM
@HUNTER has asked:
When using SwiftUI with something like Core Data and UIHostingController, how can we avoid using AnyView if the environment modifier changes the type of the view. See example below.
`import UIKit
import SwiftUI
import CoreData
struct MyView: View {
    var body: some View {
        Text("!")
    }
}
class MyHostingController: UIHostingController<MyView> {
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        // custom stuff here
    }
}
class TestViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        let persistentContainer = NSPersistentContainer(name: "MyStore")
        let rootView = MyView().environment(\.managedObjectContext, persistentContainer.viewContext)
        let hostingController = MyHostingController(rootView: rootView) // <---- this will not work anymore because type has changed with the environment modifier
        // more stuff
    }
}
`

Curt (Apple)
Great question! Here’s a technique, though it runs the risk of angle-bracket-blindness :sunglasses: …

Curt (Apple)
In class MyHostingController: UIHostingController<MyView> MyView isn’t really the right type.

Curt (Apple)
You want the type of MyView().environment(\.managedObjectContext, persistentContainer.viewContext)

Curt (Apple)
On the let hostingController = …  line, you’re probably getting an error message about the types not matching. That error message will include the full type of the right-hand side of the assignment.

Curt (Apple)
Something like ModifiedContent<MyView, …> with lots of stuff inside the … there. :slightly_smiling_face:

Curt (Apple)
What I like to do is (1) copy that type, then (2) add a top-level type alias: typealias MyModifiedView = ModifiedContent<MyView, …> where the right-hand side is the value I copied from the error message.

Curt (Apple)
Then you can write class MyHostingController: UIHostingController<MyModifiedView>

HUNTER
Thanks!

----------

Request ManagerWORKFLOW Jun 10th at 2:04 PM
@Nicholas has asked:
When using the new SwiftUI Table View, can you Group to have more than 10 TableColumns?

Taylor (Apple)
Yes, you can; just like Views!

Alexey
Do I understand correctly that there are no more limitation on the number of objects in @ViewBuilder?

Taylor (Apple)
There is no change to @ViewBuilder this year, so it is still limited in the number of elements it can build into a block. But Group as well as nested builders are great tools to allow for as many views to be combined together as you want

Alexey
Thank you!

Taylor (Apple)
Oh and to clarify what I mean by “nested builders”, patterns like the below:
var body: some View {
    VStack {
        header
        content
        footer
    }
}
@ViewBuilder
private var header: some View {
    // A new view builder context with up to 10 views
}
@ViewBuilder
private var content: some View {
    // A new view builder context with up to 10 views
}
@ViewBuilder
private var footer: some View {
    // A new view builder context with up to 10 views
}

Nicholas
Hi Taylor, it seems like Xcode 13 while grouping any TableColumn within the Table, fails to type check the expression. Even if I do only 2 TableColumns with 1 grouped. Created FB9155454 with an example project (edited) 

Taylor (Apple)
Thanks @Nicholas! It looks like that can be worked around by making the compilers job a little easier with some extra type information. e.g. for the TableColumn in the group adding a type for the incoming number value:
Group {
    TableColumn("J") { (number: Number) in
        Text(number.num.formatted())
    }
}
Does that work for you too?

Nicholas
Ahh yes that does work! You got to that sample project so quickly haha thanks!

----------

Betsy (Apple) Jun 9th at 7:59 PM
Last one! :cry:
How have your design and technical philosophies shifted as SwiftUI has grown?

Josh (Apple)
In the early days we were doing a lot of experimentation, and evolving our ideas about what shape the framework should take. We made a very conscious choice before shipping SwiftUI to keep the API surface focused enough that we were unlikely to have done anything so egregious that we’d want to completely rip it out. By and large I think we’ve succeeded at that. There’ve been a few things that we’ve soft deprecated over the last two years to refine the API, but the overall shape has remained largely as originally designed. I think moving a little more slowly has helped make that possible, and I’m really happy with where we’ve gone with it!

Christian:star-struck:
@Josh (Apple) On that note, did you share those early and experimental iterations of SwiftUI internally at Apple, or did you wait for the framework to stabilize before providing the other teams this tool to work with for their own work?

George
Thanks for all the great answers @Josh (Apple) @Jacob (Apple)

----------

Betsy (Apple) Jun 9th at 7:54 PM
SwiftUI makes it super easy to create an app or even a fun little UI. I’d say that even non-technical people could find themselves playing with it.
Are there any stories that could be shared of non-technical folks within Apple, even up to the executive team, when they first saw SwiftUI, tried it, or were blown away by what they saw or could themselves do?

Jacob (Apple)
One thing that’s been really cool is seeing designers inside Apple (and outside too!) start using SwiftUI to make designs and mockups. That was not something that any of us were thinking about as we were building SwiftUI, so it’s been awesome to see this new community discovering and using it.

Andrew
Preview seems to make it so easy to do easy quick mock ups of views.

Josh (Apple)
If it wasn’t obvious from his very knowledgeable responses in interviews, Craig’s a very technical person. He’s written quite a few side projects in SwiftUI in his free time over the years. I’m quite confident in that because before we had documentation I definitely provided him more direct technical support than I can for the whole developer community!

Austin
That could be an idea for a WWDC session if there hasn't already been one - a design-focused prototyping session that happens to use SwiftUI and the canvas as the prototyping tool.

Mihaela
I have a story about an amazing designer called Amos Gyamfi that now sells a course about SwiftUI on Udemy, and he is not a developer

Austin
@Josh (Apple) doesn't his WebObjects/EOF work from way back when have some sort of influence on SwiftUI? Bi-directional bindings?

Josh (Apple)
@Austin Craig absolutely has a lot of experience in these types of things from those days. Lots of good discussions have been had about that

Joshua
@Josh (Apple) I love that, despite how busy Craig must be at his position, that he still has time to write code. I always worry that technical folks like him can’t enjoy programming once they get to a certain level of management.

Austin
@Josh (Apple) I wish there was a video up for this talk :laughing: http://static.bslabs.net/wwdc/1997/411&416%20-%20EOF%20&%20WebObjects.pdf

Philip
@Austin Those are some cool slides :smile:

----------

Betsy (Apple) Jun 9th at 7:49 PM
This is a great question that I think will resonate with a lot of us here.
Hi Josh and Jacob! I’m curious to learn more about what’s it like to work on a tool like SwiftUI — which is so instrumental to so many people internally at Apple, as well as millions more developers worldwide — on a day-to-day basis. How do you assess when to add new features, views and controls, etc. versus encouraging custom solutions? Thanks for your time!

Jacob (Apple)
That’s a difficult decision! We always try to make general purpose tools that can be combined in different ways so that developers can build their own solutions for what they need. But we love to build specific views and functionality when there’s a platform behavior or appearance we give people automatically and when there are common tasks that we can provide out of the box.

Christian:star-struck:
That makes a lot of sense. Thanks, @Jacob (Apple)!

----------

Betsy (Apple) Jun 9th at 7:44 PM
Similarly to the above, in a way:
As we see more core apple apps take advantage of SwiftUI. What is the main criteria needs to be fulfilled for a core app to make the move, like we saw with the beautiful new weather app.

Jacob (Apple)
We’ve generally avoided rewriting internal apps just to reimplement them in SwiftUI. Instead, we’ve looked for places we’re making new apps or new functionality (like Shortcuts on macOS), or where there’s a significant rewrite that’s necessary anyway (like the new design for Weather).
I think that’s a great way to look for places to use SwiftUI outside Apple too!

George
Thanks for the answer Jacob!

Víctor
I like to imagine the SwiftUI team as a Trojan horse looking for projects within Apple :sweat_smile:

Josh (Apple)
There’ve been a lot of new SwiftUI apps on watchOS over the last couple of years, in large part because there’ve been a lot of new apps on watchOS. As Jacob mentioned re-designing Weather was another great opportunity

Christian
Do you think a "settings" style UI would be a good place to start with integrating SwiftUI into an existing app? It's an area I've been looking at refreshing!

Jacob (Apple)
Yeah, that sounds like a great fit!

George
Would take all of 5 minutes to implement, Christian :wink:

Josh (Apple)
@Christian that could definitely be an interesting place to start! On iOS List makes it super fast to build that sort of UI

Christian
I suppose I'm just somewhat nervous about the “text size slider” kind of edge case settings controls, but you gotta learn somewhere!

Josh (Apple)
Worst case if you do encounter something you’re not comfortable doing in SwiftUI you can always write it with UIKit and embed your implementation with a UIViewRepresentable

Christian
Right! I keep forgetting that, it's not all or nothing. Thank you!

Wilson
How did you go about determining the new SwiftUI components to add (other than developer feedback)? Did you make a rule like "no UIViewRepresentable" and see what wasn't possible in pure SwiftUI?

Chris
Josh, along the topic of "dropping to UIKit", say you have a UITableView that you're not ready to fully switch over to a List/VStack any tips on how to use SwiftUI in a new UITableViewCell design for said table view?

Víctor
And being :smiling_imp:, you can use Introspect (SPM third-party package) to modify the UIKit underlying views if you find no existing SwiftUI replacement for a UIKit API. You will have something working right now but, of course, it will break in future OS…

Mihaela
I’m sure using Introspect will break our code, for implementation may change

Parag
@Josh (Apple) While using List in SwiftUI, I keep having trouble with rows using GeometryReader. Any tips?

----------

Betsy (Apple) Jun 9th at 7:37 PM
This is near and dear to my heart because I :heart: Widgets.
 Last WWDC it was mentioned that widgets were made uniquely possible because of SwiftUI. Are there other examples of features that particularly benefited from its declarative programming model, or any aspects of SwiftUI?

Jacob (Apple)
One that I really like is the new rendering mode support for Symbols this year. We worked really closely to make the Design, the Symbols app, and the SwiftUI API all work consistently. The declarative model helped make that possible.

Christian
Do you have a favorite widget by chance?

Paul
Other than the Apollo widget, obvs :joy:

Christian
I wasn't fishing I promise!

Jacob (Apple)
I love the Photos widget! It’s great to see family pictures that I’d forgotten about!

Josh (Apple)
I am ashamed to admit that I have never used the Apollo widget. Sorry @Christian! To redeem myself I just added it to my home screen, so I will check it out

Christian
Feel free to file feedb— emails if you have any requests or bugs, Josh. :stuck_out_tongue:

Austin
Christian won't ask for a sysdiagnose! Well, maybe.

Christopher
For me, there are entire features in Capo that I built with v4 last year that I could not even fathom building without the aid of SwiftUI for prototyping and ultimately shipping the final product. I think it significantly lowers the bar to prototype (and discard with reckless abandon!) many ideas, whereas just the thought of building them in UIKit puts up a huge mental barrier.

Christopher
I can tell y’all from years of hard-won experience that it is very painful to discard weeks worth of prototyping code that didn’t work out on a physical device, whereas with SwiftUI I feel like I can throw stuff down in minutes to get a feel of whether an idea’s going to fly or not.

Josh (Apple)
@Christopher totally agree! it’s incredibly easy to prototype, play around, comment out a few lines to just hide some UI, shuffle it to a different place, etc. The cost to try something out is super low, and I find doing it to just be a lot of fun

Christopher
Indeed. The other factor for me, is that the kind of stuff I work with (audio, waveform displays, etc, etc) are nearly impossible to prototype using Sketch, Photoshop, Interface Builder, etc. by drawing ideas out from my imagination. It’s not until you’re hooked up to “real-world data” that you can truly gauge whether an idea will fly or not.

Austin
Silly question for @Josh (Apple) and @Jacob (Apple): have you seen the April Fool's joke "Objective-C UI"? https://www.swiftbysundell.com/special/introducing-objective-c-ui/
Swift by SundellSwift by Sundell
Introducing Objective-C UI | Swift by Sundell
What would it be like if we had SwiftUI, without the baggage of Swift? Introducing Objective-C UI.

----------

Betsy (Apple) Jun 9th at 7:30 PM
Next up!
Architecturally the community seems to be trending toward something like TCA (basically single store) while some are trying to do something that is closer to MVVM (or MVC). I’m curious what your thoughts are on this?

Josh (Apple)
For me the most important thing is that you have a software architecture in mind that works well for you, and helps you craft maintainable apps with a good separation of concerns. MVC has been a very common pattern over the years, but people have always chosen their own in the past as well. TCA and MVVM are absolutely ways to achieve that, but they’re by no means the only one. If you’ve got a well-considered architecture that works well for you, I think that’s great

Scott
Do you see Apple eventually chiming in with their own framework in this same space?

Emmanuel
Or more complex model examples

Alejandro
I love the TCA, but personally I really wouldn’t mind Apple being more opinionated in terms of architecture (like Google with the Android architecture).  And SwiftUI has done some steps towards that with the property wrappers and some docs, but a bit more guidance would be welcomed. Specially around things like navigation which is vital nowadays but not straightforward. :hugging_face: (edited) 

Austin
@Scott do you mean chiming in with Apple's recommended pattern?

Víctor
Related to this, how do you write unit tests for your SwiftUI code? I keep seeing Apple examples of things like View.task() that are great features but that can lead to untestable code

Hugo
What about redux pattern? this pattern is very used in state-oriented frameworks, which is Apple's recommended pattern?

Austin
It does seem that Apple nudged UIKit users into using MVC, e.g. with WWDC sessions dedicated to MVC.

Scott
As in something like TCA, but with an Apple take on the subjectt.

Philip
To that point: Whilst I agree that it's a personal choice, UIKit was very opinionated about MVC throughout. I find that SwiftUI leaves a lot more up to the developer to figure out how to structure an app once it becomes beyond tutorial-complexity. Some kind of guidance or examples of successful ways you've structured larger SwiftUI projects, I think is what people are looking for. (edited) 

Mihaela
I think Apple already is, with async-await and actors, and it is a good thing. Not a complete architecture, but it is becoming more opinionated.

Nikita
Still the main concern for large projects is navigation in SwiftUI

Scott
Yes. Actors seem to be targeted at this space. Or, at least it can be leveraged there.

Emmanuel
I find that as my models get more complex and nested, hoisting the source of truth up always ends up leading to single stores but that doesn’t play nicely without some sort of scoping which leads to either something like TCA or some MVVM solution where the source of truth get’s injected as a dependency. But this doesn’t feel quite right…

Malcolm
I love SwiftUI's architecture and have no need for another one! I think @ State and @ Binding are amazing! Took me 2 years to learn though :wink:

Kelly
I've been so well trained by UIKit to do all of my code in an MVC pattern, I feel lost with all the options for an overall architecture in SwiftUI. Ha.

Alejandro
The TCA helps amazingly with navigation. But I would love to have some framework support for declaring routes and let swiftui handle all of it. And if you make a storyboard/swiftui previews like thing that let’s you code and visually see the routes then I would cry a lot ^^
In all seriousness, with all the ways the system has to deeplink into your app (which are great!) this feels like a missing spot in the SDK offer.

Malcolm
@Emanuel TCA attempts to take local View state out to a global and then attempts to get the result back to where it came from! Seems pointless to me. Just learn @ State and how body works, problem solved!

Majid
I think we have multiple tools and we can bake the architecture we needs. Also remember that there is no silver bullet. Everything comes with its own set of pros and cons.

Emmanuel
I rather keep my logic (API calls, etc) outside of the View

Emmanuel
@Malcolm

Marcelo:flag-br:
Actually the problem is not state or observables, but how to separate concerns in a way that makes sense to SwiftUI

Majid
I guess we will have a new trend)
Multiple actors for keeping mutable shared state and view models that format the data and send messages to actors.

Emmanuel
and these view models as StateObject?

Majid
Nope, VM can be ObservableObjects there because they really derives from Actors where the actual data lives.

Emmanuel
oh interesting. So it’s just a passthrough

Majid
exactly!

Malcolm
@Emmanuel that's because you think SwiftUI View is a like a MVC View but it is not. A SwiftUI View is actually a View's data. It's fine to put your logic in there or move it to another struct if you like. Curt did this in last year's SwiftUI data talk.

Majid
I didn’t have the final picture. But this is what I think right now.

Hugo
TCA is similar to REDUX

Emmanuel
would love to see more of those thoughts and what they look like @Majid

Majid
Best way to learn new things is to build a new app! I will do that in the next couple of months and will share some results on my blog)

Alexey
@Majid Looking forward to read about that on your website

Emmanuel
Love your blog @Majid :heart:

Tarquinio
@Majid @Emmanuel I do not know TCA, but have been using MVVM with SwiftUI and results are amazing! Even can synchronize multiple devices using online realtime communication and have used it for reactive games as well :smiley:

Helge
I like to think about that in CoreData terms. The MOC would be an actor, and the MOs the observable objects (vended by that). But the actor stuff is really distinct to the way you hook up the SwiftUI, I think.
Seems like people are more concerned about how to represent navigation flows and apply deep linking (including applying user activities) and restoration to them. (edited) 

Tarquinio
Agree with @Emmanuel, your blog is amazing @Majid

Alexey
@Majid Many thanks for your articles. Your site was one of the first sites from which my acquaintance with the SwiftUI began.

Malcolm
@Helge deep linking is super easy in SwiftUI with the .onOpenURL modifier that is applied in all the Views all the way down, parsing out what ever part of the URL it needs to use to fetch.

Hugo
MVVM has bidirectional data flow, I prefer unidirectional data flow patterns

Marcelo:flag-br:
struct ContentView: View {
    @ObservedObject var viewModel: ViewModel
    init(viewModel: ViewModel) {
        self.viewModel = viewModel
    }
} (edited) 

----------

Betsy (Apple) Jun 9th at 7:26 PM
:rotating_light:Alert! Managers coding! :rotating_light:
Which property wrapper should be used in the following situation:
class AppState: ObservableObject {
    static let shared = AppState()
    var manualPauseOfSpeaking: Bool = false
}
struct SceneTitleView: View {
    @StateObject var appState = AppState.shared
	...
}
Is it: @State, @StateObject or @ObservedObject?

Josh (Apple)
@ObservedObject is really what you want here, because the only behavior you need is invalidation when the shared AppState instance changes, and that’s all ObservedObject gives you.
@StateObject would also work, but in addition to invalidation it will also provide storage. This is useful when you’re trying to have the content of the property live across multiple view updates, and would be what you want if you had instead written @StateObject var appState = AppState() because in that case you want to allocate an AppState instance once and re-use it even if SceneTitleView gets re-created. In your case the persistent storage is provided by the static let shared property on AppState, so you don’t need a property wrapper that provides storage.
@State is the wrong tool here. It provides the storage that @StateObject does, which as we just said you don’t need, but it doesn’t provide invalidation when the AppState instance changes, so it won’t do what you need.

Kelly
Thank you! Getting my feet wet in SwiftUI from UIKit and this has been something I've been trying to grasp as well.

Michael
This is brilliant - thank you! :smiley:

Malcolm
@Michael @State var manualPauseOfSpeaking: Bool = false in your parent View is what you need here. And let manualPauseOfSpeaking: Bool in your SceneTitleView. Pass it in. (edited) 

----------

Betsy (Apple) Jun 9th at 7:26 PM
:rotating_light:Alert! Managers coding! :rotating_light:
is it possible to set a specific percentage for the SwiftUI previews?
when working on a 13" MBP, the 50% canvas is just too small, and the 75% sized canvas is too big.
Thanks for all your devotion to making this framework/product so great!!

Josh (Apple)
From the drop down menu you can only choose the pre-defined scales, but you can always pinch on a trackpad to zoom the canvas to any specific scale you’d like.

Wilson
I actually just submitted a feedback report on this — it would be great to have the canvas automatically resize to fit the device, and preserve its size across restarts!

Gideon
Could you maybe touch on why it isn't possible to pinch and zoom in live previews? That would make the experience much better

Josh (Apple)
@Gideon sounds like good feedback to submit!

Gideon
Will do, thanks @Josh (Apple)!! (edited) 

Wilson
It works for me as long as you click somewhere on the screen once, and then you can hold down the Option key to pinch!

Gideon
That would then be more of a workaround. Unless it is the expected behaviour..... (edited) 

----------

Betsy (Apple) Jun 9th at 7:20 PM
This is in a similar vein to the last question, but with a bit of a technical angle:
What was it like working on SwiftUI in the early days? Swift changed a lot for us as external developers, but it must have been intense for you going through Swift 1-5, particularly given you were lacking now-standard features such as property wrappers.

Jacob (Apple)
It was quite a whirlwind! I think the first year we worked on the project was just us learning how to use Swift efficiently and ergonomically. We ended up going through many different iterations of the APIs and the implementation.
The great thing about working with the team was that we would always build on what others had done. I would come up with an idea I thought was pretty good for how animation or layout could work, and then Kyle would turn around and make it even better! It was only through continually iterating on all of the ideas that we were able to polish them to get something that works as well as SwiftUI does today.

Paul
I can’t imagine your compile times :see_no_evil:   Are you able to share roughly how much of SwiftUI is built in Swift itself, versus having to drop down to C++?

Josh (Apple)
We’ve had a close working relationship between the language and framework teams all along. Of course the framework was shaped in many ways by changes to the language. While some of the language changes driven by the framework came later we knew from pretty early on that we were going to need to add things like opaque result types to the language. The close collaboration between language and framework really makes both better.

Cameron
Can you share the rough timeline of when the SwiftUI project started?

Jacob (Apple)
Basically all of the SwiftUI framework itself is implemented in Swift, and it has dependencies on framework that are written in other languages, including Objective-C and C++.

Mihaela
Objective-C being Core Animation and C, being Core Graphics and some more?

----------

Betsy (Apple) Jun 9th at 7:13 PM
Oh I love this question. Because I remember the first time I saw a demo I thought, “whoa, this is going to change everything.”
Hi Josh and Jacob! Do you remember some of the early moments of the development of SwiftUI where things started coming together? What was that like? Can you share some stories of those experiences?

Jacob (Apple)
I remember early on when we got the animation system implemented, Josh built a demo that showed a SpringBoard home screen where you could tap to open and close folders. It was (of course!) fully interactive and interruptible, and several of us sat around with slow animations on opening and closing folders and admiring how cool it was!

Linus
Can you share how long ago that was? :eyes:

Todd
What was it like the first time you saw preview working?

Josh (Apple)
I was so excited about what we were doing with SwiftUI in those early days that I was spending my weekends building random fun sample projects like that. The thing that I found so compelling about that one is that SpringBoard itself didn’t yet support interruptible animations, so it was pretty mind blowing how quick it was to achieve something like that. And as Jacob mentioned, with slow animations on you could close one folder while opening another and have multiple open/close animations in flight simultaneously. it was pretty fun

Mihaela
Are animations driven by Core Animation underneath?

Jacob (Apple)
With previews, I remember the first time I saw selection synced up between the canvas and the code editor, I was blown away! :star-struck:

Josh (Apple)
@Todd when I switched from build-and-run to being able to write a line of code and see the result immediately I definitely felt like I was seeing the future of development. it was so compelling how quickly you could iterate, and honestly it still is. I still prototype a ton of UI without ever hitting run

Austin
Why do you think native app development had many years of the imperative model with build-and-run whereas web development was quick to move to the declarative model?
I don't know web dev well, so I hope it's a fair framing of the question! (edited) 

Josh (Apple)
@Austin I’m definitely much more of a native app development guy, so I hesitate to answer on behalf of the web development community. That said, on the native side I see it as a kind of progression of abstractions. A declarative model sits on top of imperative underpinnings, and is an abstraction over them. Abstractions make development easier, but do often come with a cost (though we obviously always try to minimize this cost). I see this in much the same way that high-level languages are great abstractions over assembly languages. New technologies come along that make abstractions less expensive, computers get more powerful, and we can afford the benefits they bring

Austin
Thank you!

----------

Betsy (Apple) Jun 9th at 7:08 PM
Next up we have a great question about the design challenges (and wins!!)
Hi Josh and Jacob! Huge fan of your work! I’m very curious to learn more about how you approached working on SwiftUI in terms of solving the design challenges of building a UI tool that works across all of Apple’s platforms. The end result is quite the achievement, and I really appreciate your continued work on SwiftUI. Thank you!

Jacob (Apple)
One of the great things about working on SwiftUI is that we have people from all of Apple’s platforms working on it, and they’re all really passionate both about that platform and about SwiftUI! We have a lot of discussions about the requirements and behaviors each platform has, and look for what opportunities there are to generalize things without losing what’s special about each platform.
My favorite example of this is the discovery Matt made that by offering a Toggle view that included the label (instead of a Switch view that was just a switch), we could get something that worked better between macOS and iOS, while also getting better Accessibility support!

Betsy (Apple)
I hope Matt used his pink hammer for that!

Christian:star-struck:
Thanks so much for that great answer, @Jacob (Apple)!

Josh (Apple)
Finding just the right level of abstraction is a big challenge, but with things like the Toggle example Jacob mentioned I think we really hit the sweet spot. Concrete enough that it’s not just an abstract concept, but with enough flexibility to give us what we need across platforms.

Christian:star-struck:
Thanks @Josh (Apple)! As a follow-up, could you maybe talk a bit about where you find the balance between providing tools in SwiftUI that enable consistency throughout all the platforms, while also providing enough flexibility for developers and designers to invent new UI and patterns?

Josh (Apple)
@Christian that’s a great question! I think both are super important. Making it easy to get the default, expected behavior was always a key goal because it helps to ensure consistency across apps. but we also always wanted to ensure we were providing enough flexibility that if you did want to do something custom you could. in general I’d characterize it as “make the common things easy, and the uncommon things possible”

Christian:star-struck:
That’s fantastic, and also sounds like an incredibly challenging task, also considering the many different stakeholders both internally and outside. Thanks so much, @Josh (Apple)!

----------

Betsy (Apple) Jun 9th at 7:01 PM
Josh and Jacob: Thank you so much for hanging out with us today! Our first question from the SwiftUI Digital Lounge is:
SwiftUI always seems to lead the way in making use of big new Swift features, sometimes before they’re even ready! Are there any details or stories you can tell of how the teams work together to develop Swift and SwiftUI alongside each other?

Josh (Apple)
It’s not just talk when we say that we’re evolving the language and the frameworks together. We’ve had a very close partnership with the Swift team and Swift community over the years, and it’s really important to us that we move both forward in the ways that make the most sense. If we can achieve something great without changing the language that’s awesome, but if we need a language feature for something to be perfect we keep that on the table. Some of the refinements you’ve seen this year, like dot syntax Styles, are great examples of that

Francisco
Any clue if and when storyboards will be supported?

Paul
Seeing Identifiable arrive with SwiftUI first, then get put into the standard library itself via Swift Evolution, was really great – it makes Swift better for everyone! :man-bowing:

Alejandro
The work you guys do with feedback during evolution proposals is very appreciated. Thanks for keeping the community on the loop ^^

Austin
How do you see the documentation people as part of this effort? The tutorial format is outstanding.

Josh (Apple)
@Paul that’s a great example of one where we knew we needed something in SwiftUI, but felt it was so generally useful that it was really worth working with the community to see if we could sink it down before we shipped

Josh (Apple)
@Austin I was so excited by how well the tutorials came out with the first release of SwiftUI. The documentation team worked super hard on those. Beside that we work very closely with the documentation throughout the release as well. We make heavy use of the new documentation tools that were just announced as well, and have collaborated with them on that along the way (edited) 

Andrew
SwiftUI tutorials are very well done!

----------

Request ManagerWORKFLOW Jun 9th at 5:09 PM
@Edward has asked:
What happens when you have three views in a hierarchy, where the root and leaf views share dependency, but neither share dependencies with the middle view. Would the middle view get redrawn?

Curt (Apple)
If the middle view isn’t dependent on the others, it isn’t redrawn.

Curt (Apple)
Note that if the root view passes parameters to the middle view, then it has a dependency.

Finn
Is it reevaluated? So second view created on the heap but not drawn?

Curt (Apple)
It’s all structs. No heap. :slightly_smiling_face:

Curt (Apple)
If the second view has no dependencies, we ignore it.

Finn
Just returning to Swift since 3 days xD

Curt (Apple)
The state is on the heap so that it persists.

----------

Request ManagerWORKFLOW Jun 9th at 5:05 PM
@Andrew has asked:
Is there a good way to switch between HStacks and VStacks while allowing SwiftUI to understand that the contents of those stacks are the same?

Matt (Apple)
Lots of questions similar to this, so repeating an answer from earlier:
Yes! You should check out the matchedGeometryEffect() API, which was introduced last year:
https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)

Karthikkeyan
Thanks for asking this question Andrew.

James
Does this modifier preserve state, for example, a NavigationView's stack?

James
Or even an @State property? The name implies not.

John
Are there any sessions that talk about matchedGeometryEffect?

Andrew
@Karthikkeyan 
We do this often in UIKit currently to better handle large dynamic text sizes (usually switching from a horizontal layout to a vertical one)

Matt (Apple)
@James Yes in general it will preserve state, however there may be some kinds of more complex transitions where this is not currently possible

Christian
@John It was introduced in last year’s “What’s new in SwiftUI” session, but didn’t go in depth very much.

Christian
But you’ll find lots of tutorials for it on YouTube!

----------

Request ManagerWORKFLOW Jun 9th at 5:03 PM
@Loic has asked:
Is the @ViewBuilder to remove AnyView in "Demystify SwiftUI" only available with iOS 15 ?

Matt (Apple)
No, in fact it can back-deploy to any previous version!

Finn
But needs swift 5.5 to compile?

Philip
I think the important part to understand was: ViewBuilder was always there. Just implicitly added to the body without you knowing.

Jan Luca
No, ViewBuilder was available since the beginning

Loic
@Matt (Apple) Thank you! But I can't make it work with Xcode 12, do I need Xcode 13 ?

Elliott
yeah me neither

Kevin
FYI, I've been using @ViewBuilder since iOS 14 for functions and vars.

Matt (Apple)
If you’re having trouble getting it to work, please file a feedback report and/or request a lab appointment for later in the week

Loic
thank you!

----------

Request ManagerWORKFLOW Jun 9th at 5:01 PM
@Andrew has asked:
Are there performance considerations when generating UUIDs? (I.e. generating a lot of UUIDs for elements in an array to display in a list).

Raj (Apple)
It depends. You'll need to measure. However, consider generating IDs lazily (make sure you store them though!)

----------

Request ManagerWORKFLOW Jun 9th at 5:01 PM
@Inal has asked:
Performance wise, is it preferred to pass `ObservableObject`s down to subviews explicitly, or use `EnvironmentObject`s?

Matt (Apple)
Using one or the other shouldn’t make much difference in any given view, but if you don’t need to use the object in some views then EnvironmentObject is a great way to avoid the boilerplate of pass it down through intermediary layers, and can avoid creating unintentional dependencies.

Inal
Sounds great! Thanks!

----------

Request ManagerWORKFLOW Jun 9th at 5:01 PM
@Yugantar has asked:
Is there a good way to apply a modifier to a SwiftUI view conditionally? I'm using a custom .if modifier, and it refreshes the whole view on state change :(

Raj (Apple)
Consider making an inert version of the modifier as discussed in the session. If there is a modifier that lacks an inert version that you'd like to see, please file a feedback.

Yugantar
For example, if I have to conditionally add a toolbar using the .toolbar modifier… @Raj (Apple)

Raj (Apple)
Toolbar items themselves can have views, so you can push the dynamism into the toolbar item.

James
As in, make a toolbar item showing an EmptyView() to hide it?

Raj (Apple)
Right.

Raj (Apple)
You rarely need to use EmptyView directly. Instead, consider using an if-else.

Yugantar
Yeah, just tried it out, using an EmptyView is causing a different set of bugs altogether.

Yugantar
However, pu

----------

Request ManagerWORKFLOW Jun 9th at 5:00 PM
@Khoa has asked:
How can we conditionally set different modifier, for example list styles?
```
List {
        }
        .listStyle(isIpad ? .sidebar : .insets)
```

Raj (Apple)
Styles in SwiftUI are static, and are not permitted to change at runtime. This is a case where a branch is more appropriate, but consider whether you really want to change the style— a single style is almost always the correct choice.

Raj (Apple)
If there is a certain dynamism you're looking for here, please file a feedback.

Edward
would it allow us to define our own ListStyle that take in a bool?

Romy
careKit has a hack for a conditional view modifier but i dunno how efficient it is https://github.com/carekit-apple/CareKit/blob/master/CareKitUI/CareKitUI/Shared/Extensions/View%2BExtension.swift (edited) 

Christopher
I’ve found that most often when situations like this happen where I need two different styles it’s because of platform differences. Which for macOS is fine because all of that code goes into it’s own target. However, there are significant style considerations between iPhone SE and iPad 12.9”. Would love to see an iPad-specific target in the future that lets us isolate code like this.

Jan Luca
Switching between a column navigation with a sidebar and a stack with a tab bar based on the size class comes to mind.
Ideally this should be handled automatically since that is recommended behavior.

Raj (Apple)
If there's behavior you think is missing, please file a feedback!

----------

Request ManagerWORKFLOW Jun 9th at 4:57 PM
@Seyed Parsa has asked:
Is there any situation in which Hashable may be preferred to Identifiable?

Matt (Apple)
If you just need to be able to identify a value, that’s what Identifiable is for, which means that only the id needs to be Hashable, not the whole type.

----------

Request ManagerWORKFLOW Jun 9th at 4:57 PM
@Karthikkeyan has asked:
If we apply same id in the condition, will SwiftUI sees this as a same view
```
var body: some View {
    if isTrue {
        Text("Hello")
            .id(viewID)
    } else {
        Text("World")
            .id(viewID)
    }
}
```

Raj (Apple)
No, these will be two different views.

Raj (Apple)
This is because body is implicitly a ViewBuilder. If you don't use a ViewBuilder, such as in another property, it would be the same view.

Seyed Parsa
To make them the same view, it should be like Text(isTrue ? "Hello" : "World).id(viewID)

Raj (Apple)
That works too!

Lior
@Raj (Apple) are there any other examples except body that are implicitly a ViewBuilders? (edited) 

Karthikkeyan
Thanks for clarifying the doubt @Raj (Apple)

Raj (Apple)
Yes, ViewModifier's body function, makeBody for view styles, preview providers, and many more.

Wilson
For academic purposes, is there any way to override the ID of a view (since id doesn't work here)? Just curious!

Víctor
So… we should avoid conditionals in view builders as a pretty much blanket rule? :/

James
I've submitted a question along those lines around overriding IDs, as I'm using HStack vs VStack for different size classes.

Khoa
@Raj (Apple) but without @ViewBuilder how can we write if else like that ?
https://wwdc21.slack.com/archives/C0246E5AEEL/p1623268665113000?thread_ts=1623268629.110000&cid=C0246E5AEEL

Raj (Apple)
This is because body is implicitly a ViewBuilder. If you don't use a ViewBuilder, such as in another property, it would be the same view.
From a thread in swiftui-lounge | Jun 9th | View reply

Raj (Apple)
 So… we should avoid conditionals in view builders as a pretty much blanket rule? :/
Definitely not! They exist for a reason. The message here is to just be careful when using them over-aggressively.

Raj (Apple)
@Raj (Apple) but without @ViewBuilder how can we write if else like that ?
It's only going to compile if the types line up on each side.

----------

Request ManagerWORKFLOW Jun 9th at 4:55 PM
@Edward has asked:
Are there any difference between
passing a State as a binding through each view in the hierarchy
vs
passing it as an environment object and only access it in the subviews that use it, say in a Text view
would the first one have worse dependency graph that needs more updates?

Luca (Apple)
environment object is a slightly different tool than State since it requires an ObservableObject. Environment object is optimized to invalidate only the views that read its value.
As for State, when you pass the binding down to subviews, changing the binding will mutate the state that in turn will invalidate the view holding the state and its children.

----------

Request ManagerWORKFLOW Jun 9th at 4:54 PM
@Javier has asked:
What is a good way to have a custom order of elements in a list so the user can change the order (using a stable ID)?

Matt (Apple)
A List or ForEach will preserve the same order as used in the collection passed into them. The identity of each element should be independent of that order — even if a collection is reordered, each element should maintain the same ID.

Matt (Apple)
If you maintain a stable identity like that, then you should be able to reorder the collection no problem in response to user actions

Javier
Perfect, thank you

----------

Request ManagerWORKFLOW Jun 9th at 4:53 PM
@Ivan has asked:
Is there a way to animate a View moving from one place in hierarchy to another? Like when a View changes parents?

Matt (Apple)
Yes! You should check out the matchedGeometryEffect() API, which was introduced last year:
https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)

Ivan
Thank you so much, Matt 

Edward
one of my fav features of SwiftUI; it makes rlly cool animations!

----------

Request ManagerWORKFLOW Jun 9th at 4:53 PM
@Michel has asked:
Fun question on conditions: We need to put them at least in Group { if whatever { ... } else { ... } }. So ... is it preferable to use ViewBuilder commands to create it, like             ViewBuilder.buildBlock(pageInfo == nil ? ViewBuilder.buildEither(first: EmptyView()) : ViewBuilder.buildEither(second: renderPage) )
Awful to read, but is it better?

Raj (Apple)
Using a Group is preferred in this case.

Christopher
Is that for readability reasons, or is there a performance (or other) benefit here? Isn’t the if/else above going to create the same conditional content block nested in the Group?

Raj (Apple)
Mostly readability— it's generally not recommended to call the result builder implementation directly and instead let the compiler handle it.

Christopher
OK cool, thanks for the clarification!

Michel
So mostly Group is very low - or no - cost?

Raj (Apple)
Low enough that you shouldn't try to optimize for avoiding it.

Michel
Thank you Raj! :slightly_smiling_face:

----------

Request ManagerWORKFLOW Jun 9th at 4:52 PM
@Matthew has asked:
The Dependency Graph — can it have loops, or is it acyclic?

Raj (Apple)
Graph cycles are not allowed and will trap at runtime.

----------

Request ManagerWORKFLOW Jun 9th at 4:52 PM
@Majid has asked:
I have a class Store<State, Action>: ObservableObject that holds the whole app state. It lives as @StateObject in the root of the App lifecycle and passed via environment to all views. View send actions to the store and update as soon as store's state updated. It allows me to keep the app consistent. Could you please mention any downsides of this approach from your prospective?

Curt (Apple)
That approach makes every view in your app dependent on a single Observable object. Any change to a Published property forces every view that references the environment object to be updated.

Curt (Apple)
^ @James Michael I think this might cover your question too.

Khoa
@Curt (Apple) by "forces every view that references the environment object to be updated" you mean that view produces new body to diff with old body?

Curt (Apple)
That view produces a new body.

Curt (Apple)
SwiftUI doesn’t diff views. It regenerates views when dependencies change.

Majid
@Curt (Apple) what is your recommendation, assuming that we have multiple views depending on the same data that should keep views in the consistent/updated state?

James Michael
I was thinking re: a Store type as well @Majid
In that situation, I guess it would be good to have a way to "scope" your store down to more tailored set of properties

Curt (Apple)
I’m sorry but architectural choices are really context dependent, so there’s no blanket policy.

James
This sounds like PointFree's "The Composable Architecture"! Does anyone familiar with it know if that framework share this problem, or do unique stores for each view work around that?

Víctor
I recommend you take a look at point free Composable Architecture, they deal with this by scoping the store so the children only deal with the subset of the state needed for those children

Curt (Apple)
Scoping down your model as you move down is one approach.

Curt (Apple)
Passing a binding to a subcomponent of your state is another.

Majid
When you store it in the App struct it evaluates body on every single change :face_with_raised_eyebrow: and we can’t scope there. (edited) 

Christopher
@Majid not if you don’t @Publish any values, or otherwise trigger willChange. The “trick” is to build a scoping mechanism that doesn’t trigger willChange in child contexts if nothing actually changed.

James Michael
That's a good question for Curt.
Does using (this kind of thing) as a StateObject in an Application struct, does that mean every sub-view has its body re-computed? (edited) 

Christopher
The way that TCA works is that you effectively (pretend I’m waving my hands wildly here) set up a subscription to only the narrowest subset of properties that a given child/leaf view cares about.

Majid
Ok, so I need to store in the App a version of store without @Published

Christopher
The “trouble” with ObservableObject’s published properties is that there’s no built-in mechanism for checking if a change has actually caused change. So a method that invokes self.somePublishedValue = self.somePublishedValue will actually cause a re-computation of your top-most level body.

Majid
And then pass to my child views the version with @Published that derives from the parent store

Christopher
Similarly, calling someMethodThatTakesAnInout(&self.somePublishedValue), where that method doesn’t even touch the passed-in mutable reference, will also trigger view re-calculations.

Christopher
If you’re curious about one possible approach to make this work—check out the composable architecture from point-free on github to study further. It’s…a lot. :slightly_smiling_face:

Víctor
@Majid In real life I end up needing an appdelegate so I create my store there and the AppView can get it without listening to anything (and thus passing it down to subviews).

Majid
@Víctor this is a nice workaround.

Majid
@Christopher I saw TCA. I didn’t like the idea of having Store and ViewStore. But it looks like the only solution for the problem.

Víctor
import ComposableArchitecture
import SwiftUI
final class AppDelegate: NSObject, UIApplicationDelegate {
    let store = Store(initialState: .init(), reducer: appReducer, environment: .live))
    func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
    ) -> Bool {
        ViewStore(store).send(.didFinishLaunching, animation: .default)
        return true
    }
}
@main struct MyApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) private var appDelegate
    var body: some Scene {
        WindowGroup {
            AppView(store: appDelegate.store)
        }
    }
}

Víctor
A quick example

Majid
@Víctor thank you. It is clear now. So every view in your app explicitly accepts store? you don’t use environment for passing implicitly, right?

Christopher
I am partially to blame for ViewStore, sorry. It’s a necessary evil, but you can get around it by storing a local viewStore that you set up on init.

Christopher
(They use both patterns quite a bit in their examples, so you can gauge pros/cons of both.)

Majid
if you don’t use ObservableObject you can’t use environmentObject. It looks like fighting a system. (edited) 

Víctor
@Majid Yeah, basically composable architecture all the way except for small views (buttons, empty cases, those things)

Víctor
@Christopher Thanks for that evil! :)

Víctor
@Christopher However we’ve banned the use of a stored viewstore created in the view init because it’s more inefficient :/ Basically if we use WithViewStore it only needs to create it once the body is executed, but if we create it in the init the (non-free) ViewStore.init will be executed too. If there are many subviews (like in a grid) it can lead to issues.

----------

Request ManagerWORKFLOW Jun 9th at 4:52 PM
@Edward has asked:
is there any difference between the persistence of @State vs @StateObject vs @ObservedObject when identity changes?

Raj (Apple)
Yes! ObservedObject does not have any lifetime implications— when you use that property wrapper, you are responsible for managing the lifetime yourself. The object can live anywhere— either in StateObject or possibly even in another data structure in your app.

Edward
while @State and @StateObject behave in the same way?

Raj (Apple)
Right, they define a new source of truth.

----------

Request ManagerWORKFLOW Jun 9th at 4:52 PM
@Andreas has asked:
Should `@State` and `@StateObject` be usually defined as `private`?

Raj (Apple)
Yes! It's often helpful to make them private to indicate that the state is for this view and its descendants.

Andreas
Thank you! It was a great talk! :slightly_smiling_face:

----------

Request ManagerWORKFLOW Jun 9th at 4:51 PM
@Todd has asked:
If the only reasonable property for establishing stable identity in a model from, say, an existing JSON API, is a string that might be quite long (maybe it's more of a description than a name), is that large ID enough of a potential performance problem that we should consider modifying the model/API to add a more compact ID? Thanks much!

Raj (Apple)
Great question! As with any performance problem, it's best to measure first before over-optimizing. Long strings can often be expensive, so it might make sense to optimize the identifier, but I'd recommend measuring first.

----------

Request ManagerWORKFLOW Jun 9th at 4:50 PM
@Giulio has asked:
I have created a ViewModifier that adds a custom modal “overlay” on top of a view, somewhat similar to a sheet. Is there a way to pass a View as parameter of this ViewModifier initializer, without resorting to AnyView? I want to be able to pass the view that will be the actual “content” of the overlay.

Raj (Apple)
You can do this by making your custom ViewModifiergeneric on the content, something like: struct MyModifier<C: View>: ViewModifier { ... } , then using a property with the generic like so: var content: C

Giulio
Thanks Raj, I think I tried that, but it would not compile because the ViewModifier protocol was not generic… let me try again so I can be more specific about the compiler error I get

Giulio
Oh, I see, maybe it’s because I used “Content” as the C in your example, conflicting with the existing Content of a ViewModifier

Giulio
yay! I made it work! Thanks again :relaxed:

----------

Request ManagerWORKFLOW Jun 9th at 4:49 PM
@Axel has asked:
From the dependency graph part of "Demystifying SwiftUI":
The video mentioned that both views, two views that are dependent on the same dependency, would need to generate a new body. Which view would need to generate a new body first if one view is the child of the other?

Luca (Apple)
The parent view will generate its body first, and recursively travers all the child views.

----------

Request ManagerWORKFLOW Jun 9th at 4:48 PM
@Christopher has asked:
Is the computed UUID not stable because we cannot predict the position of the value, therefore where it will be placed in the view?

Curt (Apple)
@Raj (Apple) can you take this one?

Raj (Apple)
yes

Finn
If I understood the demo correctly, it was because it created a new UUID on each call to id. I think it would be stable if we are able to preseve it

Seyed Parsa
It was computed, so not stable on each use...

Roy
So, would "let id = UUID()" be correct?

Raj (Apple)
The computed UUID is not stable because each time the property is accessed, you'll generate a new UUID.

Raj (Apple)
So yes, you'd often want to use a stored property if you're using UUID.

Christopher
OK thanks @Raj (Apple)

----------

Request ManagerWORKFLOW Jun 9th at 4:48 PM
@Seyed Parsa has asked:
Do situations exist when the developers really need to use AnyView and there are totally no alternatives using Swift constructs?

Matt (Apple)
Lot’s of questions about when it is okay or not to use AnyView!
If you can avoid AnyView, we recommend that. For example, use @ViewBuilder or pass view values around using generics instead of using AnyView.
However, we offer AnyView as API because we understand that there are some situations where no other solution is possible, or comes with other important tradeoffs.
One rule of thumb: AnyView can be okay if used in situations where the wrapped view will rarely or never change. But using AnyView to switch back and forth between different values can cause performance issues, since SwiftUI has to do extra work to manage that.

Seyed Parsa
Thanks a lot! :slightly_smiling_face:

Tiziano
I just wrote a library that relies on AnyView and this is very nice to hear :joy: (edited) 

Matt (Apple)
I will say though that it’s more and more rare these days that we find situations where AnyView is the best tool. So definitely pause and consider for a bit whenever you think it might be necessary — there are often other ways to do the same thing!

Elliott
so if i had a function that returns some view, and i want the default value to be EmptyView, currently i would do return AnyView(EmptyView()). adding @viewbuilder means i can just say  return EmptyView() is that correct?

Franz
I am using AnyView a lot in NavigationLinks destination and modal presentations. So only when having a completely new screen. This allows me to dynamically change flows etc. during runtime without baking everything into the type system.
Is there any performance difference when using AnyView in the screen boundary places?

Tiziano
@Franz I’m using AnyView for exactly the same reason… I have a number of screens that need to present “something” without knowing in advance what (because it’s in a different, sibling, module) (edited) 

Franz
Exactly the same case both for presenting and pushing/popping. This allows to decouple screens from each other. Super important in larger projects with larger teams.
I haven't seen any performance downside so far. But I was interested if SwiftUI is still able to do all the optimisations as long as a whole screen is not using AnyView and just the boundary is using it. cc @Matt (Apple)

Tiziano
I’m about to open source my library, by the way :thumbsup:  I’ll post on the Swift forums when the time comes :wink:

----------

Request ManagerWORKFLOW Jun 8th at 10:00 PM
@Paul has asked:
Do you have any suggestions for why `Image("AppIcon")` would fail to work, when `Image(uiImage: UIImage(named: "AppIcon")!)` works just fine? Is that intentional behavior?

Paul (Apple)
Is the image located in an asset catalog?

Paul
Yes. It’s the AppIcon in the asset catalog.

Paul
(As in, the one used for the app icon on the home screen.)

Paul (Apple)
Please file a report through feedback assistant if you haven’t already. If you have, can you post the number here?

Curt (Apple)
I’d wonder whether the asset compiler is treating the app icon specially.

Paul (Apple)
! (edited) 

Curt (Apple)
We should fix it, but perhaps the app icon is being copied elsewhere in the bundle so the system can reach it.

----------

Request ManagerWORKFLOW Jun 8th at 9:55 PM
@Adam has asked:
Is there a way to debug AttributeGraph crashes? I’m getting `AttributeGraph precondition failure: "setting value during update": 696.`, probably due to a hosting controller somewhere, but don’t know how to track it down.

Curt (Apple)
Thanks for the question!

Curt (Apple)
That error usual means that some code evaluated in body or updateUIViewController  (or NS…) is mutating state.

Curt (Apple)
We have a new debugging tool in the new SDK that might help narrow it down.

Curt (Apple)
Inside body if you write Self._printChanges() SwiftUI will log the name of the property that changed to cause the view to be redrawn.

Curt (Apple)
(Note the underscore. This isn’t API, but is for exposed for debugging.)

Adam
I’ll try that, thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:52 PM
@HUNTER has asked:
Still hoping to get any info on if you can hide the tab bar when using TabView and pushing items onto a NavigationView like you can in UIKit.

Paul (Apple)
I do not believe there is a TabViewStyle that will allow this. However, please file a request using feedback assistant describing your use case. Thanks!

HUNTER
Yeah, I have a few… FB6926435 is the latest.

HUNTER
Thanks.

Paul (Apple)
Excellent, having a number is really helpful. We’ll take a look!

HUNTER
Since I can’t write a general thank you… THANK YOU. This is awesome.

----------

Request ManagerWORKFLOW Jun 8th at 9:52 PM
@Dan has asked:
I've started an app where I've got 3 screens - selected by tab views. I'd like to create a setting to default to one of the screens or the other. What's an efficient way to do that? Maybe a lab type question...

Josh (Apple)
You would use the selection Binding passed into the TabView initializer to decide which view will be selected by default.

Josh (Apple)
struct ContentView: View {
    @State var selectedTab = 1
    var body: some View {
        TabView(selection: $selectedTab) {
            Text("First")
                .tag(0)
            Text("Second")
                .tag(1)
            Text("Third")
                .tag(2)
        }
    }
}

Josh (Apple)
That will have the view start with the 2nd tab selected

Dan
Oh! Right tags - that makes a lot of sense - Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:50 PM
@Michel has asked:
Any way to control when the @SceneStorage gets saved? Many are in my root app view, and they only seem to be written at app background, not before.

Curt (Apple)
I’m sorry, but we don’t provide API to control scene storage. The intent is that it’s saved on backgrounding and restored on foreground/scene recreation.

Michel
That’s what I expected :slightly_smiling_face: Ty for this, and ty for all the awesome answers tonight!

Curt (Apple)
Thanks for using SwiftUI and helping us make it better!

----------

Request ManagerWORKFLOW Jun 8th at 9:49 PM
@Matthew has asked:
As a college student, working as an intern at Apple is really important to me. What is your best recommendation for individuals considering applying for an internship at Apple, whether it be related to a resume, project types, or otherwise?

Sam (Apple)
It’s great to hear you’re interested in working at Apple! I joined as an intern so I can definitely relate to the craziness of applying, but it is absolutely worth doing. Interning at Apple is a really wonderful experience, and you really do some incredible work over the course of an internship! Getting hired at Apple means being very intentional about what you’re looking for, and the best way to do that is to explore the jobs site for roles you think you can do, and applying specifically for that role. We have thousands of hiring managers and I don’t know most of them, so my recommendation won’t carry much weight, so I can’t be of much help there. My best advice is to create a compelling cover letter and résumé that expresses why you are right for this specific role, rather than applying for dozens of jobs at once. (edited) 

Sam (Apple)
There’s lots more information for you here as well: https://www.apple.com/careers/us/students.html (edited) 
AppleApple
Be an innovator, not a spectator.
Come to Apple as a student and your team will welcome you as a full contributor, like any other employee. That’s just one reason why you can have so much impact here. You’ll get hands-on experience while collaborating with some of the best minds in the world. Yes, you’ll learn from them, but they expect to learn from you, too.
https://www.apple.com/careers/us/students.html


Matthew
Thank you so much!

----------

Request ManagerWORKFLOW Jun 8th at 9:48 PM
@Todd has asked:
Is there an efficient way to set the values of individual pixels in a view in SwiftUI? Sorry I haven't fully examined the new Canvas API yet. For the record, I don't really know how to do this in UIKit either, other than writing a custom fragment shader for a Metal view. Thank you!

Josh (Apple)
Canvas is really the best bet here. You could fill a 1px x 1px rectangle of the color you want, and that would be the most efficient expression of that within SwiftUI itself.

Todd
Thank you very much @Josh (Apple).

Josh (Apple)
And to get the size of a pixel you would request the pixelLength from the environment of the GraphicsContent of the Canvas

Gene
Seems like a perfect application of Canvas Todd

Todd
I’m guessing it’s less efficient than setting bytes in a CALayer, or whatever the lower-level operation would be.

Gene
Definitely seems so - canvas seems relatively straight forward
:heart:
1

Josh (Apple)
Give it a shot :slightly_smiling_face: Canvas is pretty optimized for this kind of usage.

John
Can a canvas be converted into a UIImage?

Todd
Cool, I will! Thank you.

----------

Request ManagerWORKFLOW Jun 8th at 9:45 PM
@Andrew has asked:
When to iterate a collection directly from List(items) { items in
Code here
vs.
List {
ForEach(items) { items in
Code here

Josh (Apple)
Fundamentally these should provide the same behavior, in almost all use cases this would be a stylistic choice over which to use. The former works great if you know you'll only ever have that single array of items in your list. The latter is where I generally start because its less things to change if I want to provide content from multiple sources into my list.

Andrew
Thanks Josh! So much to learn with SwiftUI not just this year but previous. Lots for me to research. I appreciate it.

----------

Request ManagerWORKFLOW Jun 8th at 9:45 PM
@Alex has asked:
Will TextEditor have any level of support for AttributedStrings?

Paul (Apple)
While we can’t comment on any future plans, please do file a request through feedback assistant for any improvements to TextEditor that you would like to see! (edited) 

----------

Request ManagerWORKFLOW Jun 8th at 9:42 PM
@Christopher has asked:
Is it possible to specify paragraph styles AttributedStrings used by SwiftUI Text views? I don't see any mention of paragraph style in the SwiftUI AttributeScope (but it's there for the UIKit scope)

Natalia (Apple)
SwiftUI currently supports all of the attributes in the SwiftUI scope and some in the nested Foundation scope, the supported Foundation attributes are links and inlinePresentationIntent. So it’s not possible to specify paragraph styles

Natalia (Apple)
Please file a feedback on that!

Christopher
OK, I'll do that. Thanks again for your help. I really appreciate the quick responses here in the digital lounge!

Natalia (Apple)
Very happy to help! Thank you for your feedback!

----------

Request ManagerWORKFLOW Jun 8th at 9:41 PM
@Andrew has asked:
Is it possible to place a CALayer inside of a SwiftUI view without using a UIViewRepresentable?

Josh (Apple)
Not currently. UIViewRepresentable is the way to go if you want to expose custom layers inside of your SwiftUI content. If you have a specific use-case where this can't work, please do file a feedback request!

----------

Request ManagerWORKFLOW Jun 8th at 9:41 PM
@Dan has asked:
How do I get a SwiftUI time picker to change to 5min instead of 1min? I tried to find that but so far I haven't found how to do that...

Curt (Apple)
Thanks for the question. Making sure I understand…

Curt (Apple)
Are you using a DatePicker and want the stepper increments to be 5 minutes instead of 1 minute?

Dan
Yes - sorry should have said taht

Dan
no actually a time picker

Dan
.datePickerStyle(WheelDatePickerStyle())

Dan
to be specific :slightly_smiling_face:

Curt (Apple)
Ah, right. And that’s applied to a view hierarchy containing a DatePicker then?

Curt (Apple)
Set to just show time components?

Dan
Yes: DatePicker(“Please enter a time”,
          selection: $startTime,
          displayedComponents:
          .hourAndMinute)
          .labelsHidden()
          .datePickerStyle(WheelDatePickerStyle())

Curt (Apple)
And after all that clarification, I’m afraid the answer is that we don’t provide customization for that currently.

Dan
ouch - not even in iOS15?

Curt (Apple)
That would be a great enhancement request Feedback.

Dan
I need to learn how to do that

Dan
So … I could drop back out of SwiftUI and use UIDatePicker … which has a minuteInterval. Default is 1, set it to 5.

Dan
or is that maybe macOS only?

Curt (Apple)
UIDatePicker provides a minuteInterval property, so that would work

----------

Request ManagerWORKFLOW Jun 8th at 9:36 PM
@Joshua has asked:
In the past, I have created `Button` views that will have a local state and present a sheet. For instance, I might have a `Button` whose purpose is to add a new item to my app's data. This was super convenient because I could add such a button in any context without needing the view adding the button to know about that functionality.
Running my App Store version of my app on iOS 15, those buttons no longer are working. (I haven't yet debugged the app; I'm simply noticing it across my iOS 15 devices.)
Is this a sign that this is a pattern I shouldn't be using? Or should SwiftUI continue to support such patterns?


Paul (Apple)
Please file a report using feedback assistant and a sample project. Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:28 PM
@Sahand has asked:
There are instances when Buttons in SwiftUI stop responding to the iPadOS pointer, but work when tapped normally. Is this an expected behavior?

Paul (Apple)
Please file a report using feedback assistant and a sample project that reproduces this issue! I would not consider this expected

----------

Request ManagerWORKFLOW Jun 8th at 9:28 PM
@Andrew has asked:
Is it possible to change the spacing between views in a List (or stack view) as the list scrolls up and down in a springlike manner? (i.e. is there a SwiftUI equivalent to UIKitDynamics?)

Luca (Apple)
Hi Andrew, we don’t have any support for this in SwiftUI. Could you please file a feedback with the use case you are interested in? Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:23 PM
@Jason has asked:
What’s the recommended practice for custom sheet presentations? SwiftUI’s .sheet only supports the standard card-style modal presentation. It doesn’t have the flexibility of e.g. UIKit’s transitioning delegates and presentation controllers to let us size and position modally presented controllers.

Curt (Apple)
Thanks for the question.

Curt (Apple)
For custom presentations, I’ve had good luck putting the presentation content in an overlay, then using an offset modifier to shift it off screen.

Curt (Apple)
To bring it on screen, I use State to zero out the offset.

Curt (Apple)
If the state is updated inside withAnimation to transition is animated.

Jason
That content won’t be lazy then, right? It’ll be computed in advance and off-screen.

Curt (Apple)
You could conditionalize the content too.

Curt (Apple)
An offscreen empty view would be essentially free.

Jason
Okay, I see. Thank you!

Curt (Apple)
As would an offscreen view with opacity of 0.

Curt (Apple)
You might need to play with the transitions to get the appearance just right.

Jason
And it’s essentially free because the framework is smart enough to not bother rendering content that’s invisible?

Curt (Apple)
Yep!

Brett
Here is how I’m doing it currently, hope don’t mind me jumping in
struct ValidationSheet: View {
  var isPresented: Binding<Bool>
  var body: some View {
    ZStack {
      if isPresented.wrappedValue {
        Group {
          cardOverlay() // black 50%
          sheetContents() // the actual sheet
        }.onDisappear {
          isPresented.wrappedValue = false
        }
        .accessibilityElement(children: .contain)
      }
    }
  }
}

Samuel
Does overlay work even if presenting from further down the view hierarchy? We’ve seen this get presented behind other views (like toolbars). We’ve ended up making our own modal modifier that presents inside a hosting vc & “fishing” for a view controller to present from the UIkit way. It’s a hack, but it does work.

Jason
For some reason, I can’t help but feel like a zero-opacity overlay is kind of hacky for custom presentation. It doesn’t seem as elegant as the composition involved in UIKit’s transitioning delegates and presentation controllers. Do I just need to get over this mental block, or is this an area where the framework could still be enhanced? (Asking all of you in this thread, not just @Curt (Apple)!)

Curt (Apple)
There’s always room to enhance the framework. :slightly_smiling_face:

Curt (Apple)
Enhancement requests in Feedback with specific use cases are really helpful to us in designing and prioritizing features.

----------

Request ManagerWORKFLOW Jun 8th at 9:22 PM
@Brett has asked:
I have a custom validation view using the `overlay` modifier on a List, the problem is when the validation view is visible the list in the background still receives accessibility events - what's the best way to handle this?

Paul (Apple)
@Nathan (Apple) what was the solution you were suggesting?

Nathan (Apple)
Hey Brett, have you given your overlaid validation view the isModal trait?

Brett
struct ValidationSheet: View {
  var isPresented: Binding<Bool>
  var body: some View {
    ZStack {
      if isPresented.wrappedValue {
        Group {
          cardOverlay() // black 50%
          sheetContents() // the actual sheet
        }.onDisappear {
          isPresented.wrappedValue = false
        }
        .accessibilityElement(children: .contain)
      }
    }
  }

Brett
Nope, that may be the secret sauce thanks will test

Brett
@Nathan (Apple) that didn’t work unfortunately

Nathan (Apple)
Where did you add the trait?

Brett
List { content here }.overlay(validationErrorSheet().accessibility(addTraits: .isModal)) (edited) 

Nathan (Apple)
Seems like a bug. I would expect that to just work.

Nathan (Apple)
This is iOS right?

Paul (Apple)
Please file a report using feedback assistant and a sample project!

Brett
Yep

Brett
Will do, thanks!

Nathan (Apple)
If you would like to file a bug with Feedback Assistant and let me know the number, I can follow up on the issue. For now, for iOS 15 and aligned releases, List { ... }.accessibilityHidden(isOverlayVisible).overlay(...) should do the trick

Brett
That also didn’t work for me, I’ll build a sample and post back here with the number

Nathan (Apple)
Interesting, I'll take a look at that as well

----------

Request ManagerWORKFLOW Jun 8th at 9:12 PM
@Vaccor has asked:
Is it possible to prevent a Button inside a List item from being activated when the list row is selected? Right now, if you have multiple Buttons they will all be triggered when the row is selected, so can't really have a secondary button in a list row.

Josh (Apple)
Explicitly setting the buttonStyle of the nested buttons will stop the List from capturing the event.

----------

Request ManagerWORKFLOW Jun 8th at 9:07 PM
@Mateus has asked:
What is the recommended way to open a View in a new window in SwiftUI for macOS?

Jeffrey (Apple)
We don’t have much API in this area at the moment - using a NavigationLink in a commands context will open a window with the destination view. Could you elaborate on your use case here? If not, that is ok, but I would definitely suggest filing a feedback with any info you can provide us.

HUNTER
We did a convoluted combination of URLs and handlesExternalEvents to trigger a WindowGroup which seems to work?!? Not sure if that’s a best practice though - was hard to find details on this. (edited) 

Jeffrey (Apple)
Yes, that works due to the default behavior of handlesExternalEvents, which is to create a new window for the matched scene.

Jeffrey (Apple)
Certainly any feedbacks filed here would be much appreciated, and can help inform our APIs in this area. (edited) 

Mateus
Thanks for answering! I have no particular use case that I can point right now :sweat_smile: I just remembered that I tried doing this one time and I had to use AppKit to create a new window.  it's the way it's done in a WWDC 2019 SwiftUI On All Devices Session if I'm not mistake. (edited) 

Jeffrey (Apple)
Ok, sounds good. I can’t say I remember all the particulars of that session, but it predates the App and WindowGroup APIs.

----------

Request ManagerWORKFLOW Jun 8th at 9:06 PM
@Matthew has asked:
How would someone go about turning a List cell into a TextField on tap, such as to edit the name (similar to the Reminders app)?

Curt (Apple)
I’d try putting a TextField in an overlay of your cell content with an opacity of 0 and disabled. Then use a tap gesture to switch the opacity and un-disable it.

Matthew
Awesome, thank you!

Curt (Apple)
You could use the new FocusState or onSubmit when the user is done editing to switch back.

Jason
What about the new selectable text modifier?? Would that work here?

Curt (Apple)
The trickiest bit will be getting your TextField and the regular Text to line up.

Curt (Apple)
You might need some custom padding for that. Take a look at the ScaledMetric property wrapper to make padding that adapts to dynamic text size.

Curt (Apple)
Jason, that’s a great idea. It would work for selecting and copying the text, but not for editing it.

Jason
Ahhh right. Got it, thanks :slightly_smiling_face:

Matthew
Is there any way to create a frame that takes up the same size as the text and then set that as the editable area to avoid padding inconsistencies across device screen sizes? (edited) 

Curt (Apple)
If the TextField is in an overlay on the Text, it should be constrained to the same size. The challenge is that editable fields (on iOS at least) include some insets that static text does not.

Curt (Apple)
Slack is a terrible compiler, but I’m imaging something like:
Text(itemText)
  .padding(2)
  .overlay {
    TextField($itemText)
  }
(edited)

Curt (Apple)
That’s missing the bits to hide and show the pieces.

Curt (Apple)
The trouble is if itemText is a short string, the whole assemblage will be short.

Curt (Apple)
I think the toggling is the hard part and the rest will take some experimentation.

Matthew
So would it be better to put the Text inside of a frame with the overlay? That’s about all I can think of right now without diving into the documentation.

Curt (Apple)
Yeah, a flexible frame seems like the right answer. Perhaps with a layout priority greater than 0 so it consumes most of the space.

1

Matthew
Got it, thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:04 PM
@HUNTER has asked:
There's a lot of sample code out there where people use GeometryReader inside of clear overlays and the like to not impact layout... is that "ok"? Seems not like the way it was designed to work.
14 replies

Josh (Apple)
In general we'd consider that a bit of a misuse of the API. If you have specific use-cases where you're needing to do this we'd love to hear about it in a feedback report!

HUNTER


Samuel
That is a very common pattern out in the wild; measure an arbitrary view by puting a GeometryReader as a background with a Color.clear in it & set a preference key to capture it’s size.

What’s the recommended way?

HUNTER
This is the sort of code I’m thinking of.

Sahand
@HUNTER @Samuel I'd be happy to collaborate on a Feedback report. But I totally get this and have done this myself — The reason I've personally done it is because you can't just put stuff in a GeometryReader without that changing the layout behavior. So... the overlay/background method comes in handy for getting the size while still preserving the view's own layout behavior

Samuel
Same; have done it multiple times. I don’t really know another way.

Eric
Yeah, we wanted one View to take up 50% of the space and two others to take up 25% each and without GeometryReader you can't easily do that (I think?) but then it messes up the spacing.

Josh (Apple)
@Eric you could use .layoutPriority to help with that some. Or nesting stacks can provide some ways to achieve that as well.

Eric
I'm not sure how those would give me the exact percentages, though. Let's say for simplicity sake I have three Images. I can make an HStack { Image, HStack { Image Image} } but that's not going to split up the screen 50% x 25% x 25%, will it?

Josh (Apple)
Thats exactly what it'll do, assuming all the images are .resizable

Josh (Apple)
        HStack {
            Color.green
            HStack {
                Color.red
                Color.blue
            }
        }

Josh (Apple)
Will give you 50% green and 25% the other two (edited) 

Eric
thx

Chang
My company is using this to achieve “Load more cell on the bottom of a scrollview” feature. It works but the code looks pretty strange:joy: 

----------

Request ManagerWORKFLOW Jun 8th at 9:04 PM
@Kedar has asked:
This is kind of vague, but I know HID declares that a second button below a Sign in With Apple Button can't look too similar as to distinguish them. How lenient is this? Like I tried to "replicate" the sign in with apple button for a Sign in With Email Button (like a logo next to it with an envelope instead of the apple logo, used a similar but not SF font, etc), but I'm afraid this would constitute as being "too similar to the Sign in With Apple Button". Sorry for the vague question, and let me know if this is more suited towards a lab!

Paul (Apple)
We cannot provide that kind of guidance here; you are probably better off reaching out to App Store developer review labs for confirmation. I would also review the guidance provided here re: custom buttons: https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple/overview/buttons/
developer.apple.comdeveloper.apple.com
Buttons - Sign in with Apple - Human Interface Guidelines - Apple Developer
Learn about designing apps for Sign in with Apple.

Kedar
Will do! Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:03 PM
@Ron has asked:
What is the layout and sizing behavior of Canvas?

Curt (Apple)
A Canvas will consume the space offered to it.

Curt (Apple)
You can put it in a .frame to control the size if needed.

Ron
Is there a way to make it specify an intrinsicContentSize?

Curt (Apple)
Does the .frame answer your question?

Ron
I don’t think so, but I need to think about it. I’m implementing a Math view that has linebreaking behavior like TextEditor. It has an intrinsic size, but is bounded by the width of the containing view.

Ron
(That is currently implemented via (NS|UI)ViewRepresentable overriding intrinsicContentSize on the NS/UIView)

Curt (Apple)
How is the intrinsic size calculated? It seems like the calculation should still apply and could be used to set the frame.

Ron
It is similar to laying out text. Yes, it could be done outside and applied to the canvas. Because it depends on the width of the container, I suppose I need a GeometryReader for that?

Curt (Apple)
Canvas is passed its own size. So you’d only need the reader if you have other things that can constrain the Canvas.

Curt (Apple)
I think I’d need to see your Canvas in context to really understand.

Ron
I have size inside the Canvas. Can I apply a frame to the Canvas inside the canvas? (Apologies - I just started on SwiftUI recently, still a noobie.)

Curt (Apple)
The inside of the Canvas is a regular Swift closure, not a view builder, so frame doesn’t work inside.

Curt (Apple)
It might be best to take this to the labs or developer forums where you could share a screenshot and some code. A picture would be really helpful I think.

Ron
Will do, thanks!

----------

Request ManagerWORKFLOW Jun 8th at 9:01 PM
@Gene has asked:
Is there a new SwiftUI way to convert a view into an image or pdf?  Currently, this can be done, but it is one of those round about, hacks that no one likes using.

Sam (Apple)
Unfortunately, there’s no native SwiftUI api for this right now. As was mentioned elsewhere in the thread though and in your question though, it can be done by wrapping in a UIHostingController. Feel free to file a feedback requesting the feature though!

----------

Request ManagerWORKFLOW Jun 8th at 8:53 PM
@Ilias has asked:
What is the best way to implement keyboard bindings on swiftUI, for macOS?
I'm building a video player where I would like to forward and rewind with the left and right buttons.
I've tried attaching `keyboardShortcut(.leftArrow)` on my button but it doesn't work? Is it the view I'm attaching it wrong (shall I attach it to my window root view maybe?) or is there some known bug around it? Thanks

Jeffrey (Apple)
Attaching it to the button is the correct expression here - it sounds like you may be encountering a bug with this. Could you file a feedback with this issue?

Ilias
Ah good to know that the placing is at least right! I will file a bug. :pray:

----------

Request ManagerWORKFLOW Jun 8th at 8:53 PM
@Kedar has asked:
With Sign in With Apple, is it a requirement to use a nonce? I've seen conflicting information, some stating that if it's done externally (through something like firebase), then a nonce is required, but if it's done using `SignInWithAppleButton` then no nonce is required. What's the verdict on this?

Paul (Apple)
As this does not appear to be related to SwiftUI, I recommend scheduling an appointment at one of the Apple Pay labs

Kedar
Sounds good, sorry!

Kedar
(I just thought it was related to SwiftUI given that SigninWithAppleButton is a SwiftUI element

Paul (Apple)
No problem! You’re right that this is exposed for usage in SwiftUI, but technically it comes from the Authentication Services framework (you can see this by looking at the breadcrumbs in the documentation at https://developer.apple.com/documentation/authenticationservices/signinwithapplebutton)

Kedar
Sounds good. I’ll look into that!

Paul (Apple)
Looks like there is a dedicated Sign In with Apple lab here: https://developer.apple.com/wwdc21/labs/dashboard/8SXM882739/dashboard
idmsa.apple.comidmsa.apple.com
Sign In - Apple
Sign in with your Apple ID

Paul (Apple)
There are also three authentication services labs this week on June 9, 10, and 11. You can find them by filtering the schedule at https://developer.apple.com/wwdc21/labs/dashboard/upcoming-events
idmsa.apple.comidmsa.apple.com
Sign In - Apple
Sign in with your Apple ID

----------

Request ManagerWORKFLOW Jun 8th at 8:52 PM
@Christopher has asked:
Is there a modifier to control how links in AttributedString are handled?

Sam (Apple)
@Natalia (Apple)

Christopher
Specifically, I'd like to be able to handle some links in-app, rather than booting the user out to Safari

Natalia (Apple)
Currently the links will be handled by using the default OpenURLAction from the environment, it’s not possible to override it at the moment.

Natalia (Apple)
You could however use a custom url scheme that will open the url in your app, for example myapp://

Christopher
OK... That's too bad. I was hoping to not have to register a custom URL scheme. Also, it'd be great to be able to use a custom OpenURLAction to open even https links in app.

Natalia (Apple)
Could you please file a feedback as a feature request, we will look into it!

Christopher
Doing it right now :slightly_smiling_face:

Natalia (Apple)
Great, thank you Christopher!

----------

Request ManagerWORKFLOW Jun 8th at 8:51 PM
@Tim has asked:
Let’s say I have a purely SwiftUI flow. I have a ListView with a `@StateObject var listFetcher`, that makes requests for a list of items. Tapping on an item in the list navigates to a DetailView, which has an ObservableObject property `detailFetcher`, that makes requests for details on the item.
What’s the best way to structure DetailView and which property wrapper would we use for `detailFetcher` in DetailView?
1.	Have an initializer like `init(itemID: Int)`, and use `@StateObject`? This would require us to eventually update the detailFetcher property with something like `detailFetcher.itemID = itemID` in the body’s `onAppear`
2.	Pass in the `detailFetcher` into the initializer like `init(detailFetcher: ObservableObject)` and make the property @ObservableObject? If this is preferred, where would this `detailFetcher` live if not in SwiftUI?

Matt (Apple)
In general, use @StateObject when the view in question owns the associated object, i.e. the object will be created when the view is created, and should be destroyed when the view is removed.
In contrast, use @ObservedObject when the view needs to reference an object that is owned by another view or something else. So the view is dependent on the object, but their lifetimes are not tied together.
For example, you could have a main screen that uses @StateObject to initialize your app’s model, and then pass that object off to detail screens using @ObservedObject.
Also check out the “Demystify SwiftUI” talk tomorrow to learn more about this!

Tim
Thank you Matt

----------

Request ManagerWORKFLOW Jun 8th at 8:49 PM
@Gene has asked:
With the new Markdown support for Text, are you able to control what specific Markdown elements look like?  For example, can we specify that **bold** is supposed to display as Demi-bold rather than bold?  Or what the font, font size, or font weight of an H1 header should be?  In general, how much flexibility do we have in styling the markdown?

Natalia (Apple)
At the moment, it’s not possible to control the default styling in Markdown for SwiftUI. It would be great if you could file a feedback as a feature request/suggestion. Another thing to note, SwiftUI only supports inline styles, paragraph styling such as headers (H1 for example) is not supported.

Keehun
Follow up question: is it possible to specify for Text that it’s supposed to leave the markdown formatting characters alone while keeping the formatting attributes? So Text renders: **bold** instead of bold ?

Natalia (Apple)
No, this is not supported.

Keehun
Ok. Will file a feedback as I am very interested!

Natalia (Apple)
Awesome! Thank you!

----------

Request ManagerWORKFLOW Jun 8th at 8:49 PM
@Brett has asked:
Does SwiftUI support device rotation animations? When I rotate from portrait to landscape, my app just changes without an animation.

Paul (Apple)
Please file a report using feedback assistant and a sample project!

----------

Request ManagerWORKFLOW Jun 8th at 8:46 PM
@Andrew has asked:
Does SwiftUI have an equivalent to UIview’s drawHierarchy to render the view to an image?

Sam (Apple)
SwiftUI doesn’t have API that supports this. That said, you can accomplish this by wrapping your SwiftUI view hierarchy in a UIHostingController and applying drawHierarchy to the hosting controller’s view! (edited) 

Andrew
Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:45 PM
@Deniz has asked:
Is there a suggested way or best practice to show a UIDocumentPickerViewController in a SwiftUI sheet without triggering an "Attempt to present <X> on <Y> which is already presenting <Z>?

Matt (Apple)
You should check out the .fileImporter modifier if you haven’t already:
https://developer.apple.com/documentation/swiftui/form/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)
If you are encountering a specific issue that you think may be a bug, please file a Feedback report! (edited) 

Deniz
@Matt (Apple) Totally missed that modifier last year, that alone should make things better, thanks!
Other than that, I was wondering if there’s a good practice to switch between sheets/modals (e.g. onboarding presented in sheet > pick file > back to onboarding at same place in nav stack)
I’ve got things working now, but it feels like I’m McGyvering things together that probably have a better way that I might be overlooking

----------

Request ManagerWORKFLOW Jun 8th at 8:42 PM
@Hudson has asked:
I saw in the "What's new with SwiftUI" that TextFields will now have .onSubmit for when the return key is pressed for software and hardware keyboards. Does this mean that .onCommit will be depreciated or does .onSubmit serve a different function?

Curt (Apple)
The initializers with .onCommit are soft deprecated. So no warnings in Xcode, but we’re encouraging new code to use  .onSubmit.

Hudson
Got it, thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:39 PM
@Darko has asked:
Are current changes ‘set in stone’ and the feature release plan for SwiftUI has been wrapped up for iOS15 or we could expect more functionalities along the way until the official release?

Paul (Apple)
We cannot comment on future plans. However, please file feedback for any issues you find and they will be triaged appropriately!

Paul (Apple)
Note that “issues” here refers to both what is traditionally considered “bugs” as well as an feature requests or enhancements both for existing API as well as API that is newly introduced this year

Darko
That’s what I wanted to hear :) Cheers!

----------

Request ManagerWORKFLOW Jun 8th at 8:38 PM
@Kedar has asked:
If we're using Sign in With Apple and have some text that says "Sign in with Apple [apple logo here from SF Symbols]" on a screen that comes after sign in with apple where we ask for some additional information (specifically just the birthday of the user), is that an HID violation? It's only used to reference Sign in With Apple, so I'm not sure if that would violate the rules or not

Paul (Apple)
Just to clarify, your view has static “Sign in with Apple” text after the button has been tapped/clicked on another screen?

Kedar
Well so this is how it is -
There’s a login screen - it either lets you sign in with apple, sign in with email/password, or create an account. If they pick sign in with apple, and this is the first time they go through the process, then it prompts them with the hide my email/name sheet. Then after that, again if it’s their first time, there’s a screen they go to that asks for their birthday, and it says : Sign in with Apple [apple logo] with a subtitle stating that some additional info is required (paraphrased since it’s a little bit of lengthy text), and then a date picker for their birthday. That Sign in With Apple [apple logo] is sort of replicating what’s on the Sign in with Email screen which similarly says Sign in with Email [envelope icon].

Matthew
My guess is that it would not be allowed since it is giving users the impression that the birthday is part of the Sign In With Apple process, but that is not the case. I think it’s okay to show the birthday step following the sign in process, but as for showing “Sign In with Apple ” after that, I do not think it is allowed.

Kedar
(That’s what I assumed, I’m totally fine removing it, I just wanted to get clarification)

Paul (Apple)
My recommendation would be to remove this text entirely and instead have something like “Finish setting up your account”

Paul (Apple)
As indeed this does not have anything to do with signing in with Apple

----------

Request ManagerWORKFLOW Jun 8th at 8:38 PM
@Will has asked:
Are NavigationLinks "lazy" in iOS 15?

Matt (Apple)
NavigationLinks do not fully resolve their destinations until they are triggered, though the value of the destination view is created when the NavigationLink is created.
In general, we recommend avoiding as much work as possible when a view is initialized, which would avoid potential issues here. This is important for performance. Instead, have that work be triggered within the view’s body, such as using onAppear or the new task() modifier.
SwiftUI may reinitialize views for any number of reasons, and this is a normal part of the update process. (edited) 

Will
Thanks so much, @Matt (Apple)!

Matt (Apple)
I’d recommend watching tomorrow’s “Demystify SwiftUI” talk, which helps explain some of these concepts in more detail :slightly_smiling_face: (edited) 

Matthew
Thank you so much for sharing this!

----------

Request ManagerWORKFLOW Jun 8th at 8:36 PM
@Matthew has asked:
Is there a way to show a watchOS app view using sample data in an iOS app, such as for an app that showcases various custom complication styles? I understand that the alternative would be a screenshot, but I thought it would be a much simpler workflow to have the watchOS views dynamically generated since both platforms use SwiftUI.

Matthew (Apple):swift-blue:
There is not, but please file feedback for the idea! Using screenshots is your best option as a workaround.

Matthew
Got it, thanks! Nice name, by the way! :slightly_smiling_face:

Matthew (Apple):swift-blue:
you too! :smile:

----------

Request ManagerWORKFLOW Jun 8th at 8:35 PM
@Brett has asked:
On watchOS, I'm using `.onContinueUserActivity(NSUserActivityTypeBrowsingWeb)` and `.onOpenURL`, however these only receive callbacks once the app is already open. Is it possible to use these in a way that they receive the callback from a cold launch?

Josh (Apple)
Those should function appropriately on cold launch. Please file a feedback with a sample showing where it isn't working if possible.

Brett
What’s the easiest way to setup the site association file for the example?

Josh (Apple)
:thinking_face: That is an excellent question. Just the general shape of the application and where it's wired in will go a long way, even if the entire association isn't hooked up.

----------

Request ManagerWORKFLOW Jun 8th at 8:34 PM
@Matthew has asked:
What is the recommended way to account for a NavigationView title that may take up multiple lines? I tried setting .lineLimit to nil, but I am not getting the results that I want. For instance, I have "XYZ Club Executive Meeting" for the navigationBarTitle text, but it only shows "XYZ Club Execut..."

Curt (Apple)
Take a look at the toolbar modifier and the .principal placement.

Curt (Apple)
If that doesn’t meet your needs, please file a Feedback so we can look into your use case.

Scott (Apple)
I'd also be curious what platform you are asking about here. Cause there might be slightly different advice on watch

Matthew
@Scott (Apple) This is on iOS, but I am also interested in knowing how to fix the issue on watchOS since I am planning on doing some watchOS development in the future

Sam (Apple)
As a note, the .principal toolbar placement doesn’t apply across all platforms. If you need support for this on other platforms, feel free to file feedback requesting support for this on other platforms.

Kedar
I had a similar issue in a certain part of an app I’m working on , and I fixed it with these additional declarative statements on the Text element:
                    .multilineTextAlignment(.leading)
                    .lineLimit(nil)
                    .fixedSize(horizontal: false, vertical: true)
                    .padding()
I had also set the font size prior to this, and had a Spacer() before and after the text block. Took me a little bit to figure that out. Let me know if that helps @Matthew (mods sorry if this isn’t allowed)

Curt (Apple)
Totally fine. Thanks for sharing @Kedar!

----------

Request ManagerWORKFLOW Jun 8th at 8:33 PM
@Jason has asked:
The "What's new in Foundation" session demos localizing content in a SwiftUI app, "Caffe". Is this demo app available as sample code? It doesn't appear to be listed on the sample code page.

Taylor (Apple)
It is not available. But thanks for the suggestion, we’ll consider that!

----------

Request ManagerWORKFLOW Jun 8th at 8:30 PM
@Pavel has asked:
Is there a way to hide a default green scroll indicator on watchOS when using digitalCrownRotation modifier?

Matthew (Apple):swift-blue:
There is not, but please file feedback! I'm also curious why you would want hide the indicator?

Josh (Apple)
I believe it does hide if you use make it "continuous"

----------

Request ManagerWORKFLOW Jun 8th at 8:30 PM
@Othmane has asked:
what would be the recommended way to handle complex navigations in a 100% SwiftUI project, in all my past UIKit project the coordinator pattern was really powerful for that but it's quite tricky to have it ported to swiftui. thanks

Curt (Apple)
It’s difficult to make a specific recommendation for a complex app. Every app is so different.

Curt (Apple)
This is definitely a great question to request a lab appointment for. Then we can understand your use case and make some suggestions, and maybe even look at some code together.

Othmane
make sense ! will do :pray::skin-tone-3: :pray::skin-tone-3:

Andre
We have the same issue. I guess we would like Apple to provide some guidelines on this. Like what is the best way to replace the Coordinator design pattern. If you look inf StackOverflow a lot of people are facing the same problem. If Apple can provide a framework would be even better.

Curt (Apple)
If you have a specific enhancement request, please file a feedback for that.

----------

Request ManagerWORKFLOW Jun 8th at 8:29 PM
@Dan has asked:
Is there a limit to where SFSymbols change size? I put them as items in a TabView but it doesn’t seem like they are scaling with dynamic text …

Taylor (Apple)
TabViews do have a standard symbol size across all apps and how far they scale

Dan
Does that mean they don’t scale as much as other places?

Taylor (Apple)
Right, other elements could end up scaling more, which is expected.

Dan
Ah thanks - As a UI element I sort of wanted it to scale more. Is there a better way to do that. I’d rather not leave SF Symbols

Taylor (Apple)
If you have a more custom UI element where you want that scaling, you could build that! Especially with the new .bar material, you could still get a similar material background behind that custom bottom bar

Dan
Ooo - I’ll have to read up about that. Is there a talk with more in depth discussion of material?

Taylor (Apple)
Today’s rich graphics session is the one you’re looking for :slightly_smiling_face: https://developer.apple.com/videos/play/wwdc2021/10021/
Apple DeveloperApple Developer
Add rich graphics to your SwiftUI app - WWDC 2021 - Videos - Apple Developer
Learn how you can bring your graphics to life with SwiftUI. We'll begin by working with safe areas, including the keyboard safe area, and... (15 kB)
https://developer.apple.com/videos/play/wwdc2021/10021/

Dan
Oh - I watched that but I didn’t see .bar (I don’t think)

Dan
There was an interesting thin material that looked great!

Taylor (Apple)
It ends up being the same API, just using .background(.bar) instead of .thinMaterial

Dan
Cool! thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:29 PM 
@Samuel has asked:
Sometimes with SwiftUI in AppKit or UIKit it’s only possible to do something by getting access to an underlying UI/NSViewController or NSWindow, but it requires some juggling to “peek beneath the covers” to surface these instances.Could SwiftUI provide more configuration proxies or some kind of factory-like mechanism to make this more explicit?For example, see this code from one of my projects to surface an NSWindow instance in order to change window behavior.Modifying the containing window:https://github.com/samuelwford/Humane-Passwords/blob/a11a1cc791d2af1b1253fe39180b4a2460d06ab9/Humane%20Passwords/Humane_PasswordsApp.swift#L25Surfacing the window:
https://github.com/samuelwford/Humane-Passwords/blob/main/Humane%20Passwords/Utilities/NSWindowBindingView.swift
(edited)

Jeffrey (Apple)
Could you elaborate on what window behavior you’re needing to change here? This could certainly help inform us (or perhaps we already have some API that might help)

Samuel
In this example, I’m disabling the resize button & removing the full screen behavior.

Samuel
Using a fixed frame does not prevent full screen / zoom.

Samuel
I’ve had to do a similar thing with non-sheet modal presentation in iOS.

Jeffrey (Apple)
Ah, ok, I am aware of that issue for macOS, and consider it a bug in the framework. Do you already have a feedback for this issue?

Samuel
No, but I’ll create one. :grinning:

Jeffrey (Apple)
Excellent, thank you!

Samuel
I’ll create one for the iOS modal issue, too. Thanks!

Jeffrey (Apple)
Yes, that would be great as well

----------

Request ManagerWORKFLOW Jun 8th at 8:24 PM
@Emory has asked:
Is there a way to change the background colour of a list? Last year this wasn’t possible

Natalia (Apple)
Currently it’s only possible to change background color of list rows, not the List itself.

Emory
Thanks @Natalia (Apple) , is this intended, or something that might change in the future? If so, what is the best way to change the background colour currently? I’d like to use system materials specifically

Natalia (Apple)
Unfortunately, it’s not possible to use system materials with List at the moment, please file a feedback and we will take a look at it. In the mean time, you could try using a ScrollView instead of a List.

Emory
Thanks for clarifying @Natalia (Apple) , last year I filed feedback for this: FB7661667 – appreciate all your work!

Natalia (Apple)
Great, thank you! We will look into it!

----------

Request ManagerWORKFLOW Jun 8th at 8:22 PM
@Majid has asked:
Refreshable doesn’t work with scroll view. Is it a bug or desired behaviour?

Luca (Apple)
Currently refreshable only supports List. Please file a feedback request if you have other use-cases you’d like to see supported.

Majid
Thanks, Luca. I will file a feedback with my use case.

Paul (Apple)
I also recommend filing a feedback to update the documentation to mention this fact if it doesn’t already :)

----------

Request ManagerWORKFLOW Jun 8th at 8:21 PM
@Will has asked:
How would one go about adding the .searchable modifier to a PDFView?

Harry (Apple)
On iOS, the searchable modifier works with a navigation view to render its search field. On macOS, it works with a navigation view or the root view of your scene. If you combine a `PDFView` with a navigation view, things should hopefully work as you expect. If not, please do file a feedback with some more details on what you would like to achieve.

Will
Thanks, @Harry (Apple)! I'll give it a shot and submit a post on the Dev Forums if I need further assistance. Thanks so much

----------

Request ManagerWORKFLOW Jun 8th at 8:21 PM
@Austin has asked:
Is `.searchable` for local data only, or can it be used to query services?

Curt (Apple)
Searchable specifies that the view supports search. You can implement that search however works best for your app.

Curt (Apple)
For example, you could kick off a query using the bound search term, then update the results when your query completes.

Austin
thank you!

----------

Request ManagerWORKFLOW Jun 8th at 8:20 PM
@Emory has asked:
Are you able to programmatically change focus of text fields natively in SwiftUI this year? For example, having the a button at the bottom of the keyboard say “next” and focus into the next text field?

Sam (Apple)
Posting this back here in case anyone present does have a moment to answer, but if not, there’s a focus and accessibility specific office hours later this week. If we’re not able to get to this during this block, definitely check back then!

Paul (Apple)
Indeed, I would take a look at the new FocusState APIs!

Paul (Apple)
https://developer.apple.com/documentation/swiftui/focusstate/

Christopher
I was able to get this working today in a simple sign-up workflow. Is there a trick to getting it to work in Form? So far I could only get it to work in views like VStack or GroupBox.

Paul (Apple)
If you’re seeing specific issues, I highly recommend filing feedback via the feedback assistant with a sample project attached

Emory
Awesome thanks @Paul (Apple) ! I hadn’t seen this yet. Is there a session that covers this?

Matthew (Apple):swift-blue:
Fun fact! @FocusState isn't just for TextField. On watchOS, you can use FocusState to direct the Digital Crown and on tvOS for the remote.

Paul (Apple)
There was some discussion of it in today’s “What’s New in SwiftUI” talk. There’s also a “Direct and reflect focus in SwiftUI” session that will be posted later in the week.

Emory
This looks great, thanks so much for your hard work!

----------

Request ManagerWORKFLOW Jun 8th at 8:18 PM
@Emory has asked:
Is there an equivalent API similar to UISheetPresentationController for SwiftUI?

Curt (Apple)
Sorry. There is not a SwiftUI equivalent at this time.

Emory
Is that something that would be useful to file feedback for?

Curt (Apple)
Certainly! Especially if you have a specific use case around when you need it or whether you need variable height. Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:18 PM
@Dan has asked:
Hi!  intro? I’m a hobbyist who is getting better an programming mostly because SwiftUI is so productive!
 Can you talk about ways to have existing SwiftUI code inherit the newer features so I could support both iOS 14 and 15 with one codebase?

Matt (Apple)
Most new features do not back-deploy to earlier OS versions. You can use e.g.
if #available(iOS 15, *) {
 to check for whether a feature can be used.
That said, some functionality is able to back-deploy. For example, the new ability to pass bindings to collections into List and ForEach, and get back a binding to each element, e.g.
ForEach($elements) { $element in ...
is able to back-deploy to any earlier release supported by SwiftUI.

----------

Request ManagerWORKFLOW Jun 8th at 8:17 PM
@Christopher has asked:
Can .importsFromDevices (i.e. continuity camera) work as a source for AsyncImage?

Taylor (Apple)
No, continuity camera will callback your importsItemProviders with an item provider that will give the full image data and not a URL.

Taylor (Apple)
But if you have a use case where there could be some better integration between the two, please file a feedback

Christopher
Ah gotcha. Seems like two separate use cases. Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:15 PM
@Andrew has asked:
Is there a way to animate text font size changes? Currently in iOS14 a view can smoothly animate between two sizes or colored backgrounds, but fonts will just jump from the before animation size to the after size with no interpolation in between.

Natalia (Apple)
This would be a great feedback to file, so that we can investigate!

Jake (Apple)
Please file feedback for this!
If you’re interested in a workaround, the Fruta sample code project has an AnimatableFontModifier that uses an explicit font size as its animatable data. This is used for the ingredient cards in the main smoothie detail view. This works for Fruta because the use-case is limited and the text using this modifier is for primarily for graphical purposes.
https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui

Andrew
Will do!

----------

Request ManagerWORKFLOW Jun 8th at 8:15 PM
@Dan has asked:
Will Xcode 13 run on Big Sur 11.3

Paul (Apple)
Xcode 13 requires macOS 11.3 or later. You can find the full release notes here: https://developer.apple.com/documentation/xcode-release-notes/xcode-13-beta-release-notes

Dan
Great Thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:15 PM
@Darko has asked:
Does AsyncImage support caching, and will there be an API to customize that cache?

Sam (Apple)
AsyncImage uses the shared URLSession , and so uses the shared URLCache. There’s currently no support for customizing the cache.

Sam (Apple)
If that’s something you’d like support for though, feel free to file feedback with that request :slightly_smiling_face:

Darko
Thank you!

----------

Request ManagerWORKFLOW Jun 8th at 8:12 PM
@N'rick has asked:
Is there a way to make refreshable work with LazyVGrid or do we have to adapt List as a Grid layout?

Sam (Apple)
Refreshable is currently only supported by List.

----------

Request ManagerWORKFLOW Jun 8th at 8:11 PM
@Donald has asked:
With a document-based app using a DocumentGroup scene, is there any way to present a choice of templates when opening the app without an open document?

Jeffrey (Apple)
I’m assuming you mean something similar to the theme chooser you get in Keynote or Pages? This is not something that we have an API for at the moment, but we’d love a feedback for this functionality.

Donald
Yes, that's what I mean, thank you.  I'll submit feedback

Jeffrey (Apple)
Excellent, thanks!

----------

Request ManagerWORKFLOW Jun 8th at 8:10 PM
@Ron has asked:
Any prospects for AttributedString support in TextEditor?

Paul (Apple)
While we can’t comment on any future plans, please do log a request through the feedback assistant that this is a desired feature so that we can gauge developer interest!

----------

Request ManagerWORKFLOW Jun 8th at 8:09 PM
@Sahand has asked:
What is the proper way to dismiss a .fullscreenCover when it is being presented based off an item: setting the item to nil or dismissing using the presentationMode?

Josh (Apple)
That really depends on what is doing the dismissing. They both have the same effect in setting the item binding back to nil. It is more about where you are driving the dismissal state from. If you're dismissing from within the sheet's content, then using the presentation mode will be more flexible because that will work no matter what is controlling the presentation.

Josh (Apple)
There is also a new environment property introduced this year that can accomplish this as well, which is dismiss. https://developer.apple.com/documentation/swiftui/environmentvalues/dismiss/

Sahand
Awesome, thank you. Great to know they both have the same effect!

----------

Request ManagerWORKFLOW Jun 8th at 8:07 PM
@Abdul has asked:
is the refreshable property the only SwiftUI property that supports async code?

Sam (Apple)
The task modifier also provides support for async code out of the box! Generally, we only make user provided closures async if we can provide some additional utility to you by doing so, such as canceling a task when the attached view’s lifetime ends, or finishing the refresh animation. If you want to dispatch to async code in other places, you can use an async block! (edited) 

Abdul
makes sense! thanks

----------

Request ManagerWORKFLOW Jun 8th at 8:03 PM
@Aimin has asked:
Using `@Environment(\.isSearching)`, how would multiple navigation bar in an app work?

Harry (Apple)
The isSearching environment property is tied to the searchable modifier that sets it up. If you have the following:
NavigationView {
 ContentView()
 DetailView()
}
.searchable(text: $text)
Then you could query the isSearching property inside of ContentView or DetailView. If you have the following:
NavigationView {
 ContentView()
 DetailView()
  .searchable(text: $text)
}
Then you could only query it inside of DetailView. Similarly, if you have the following:
NavigationView {
 ContentView()
 MiddleView()
  .searchable(text: $text)
 DetailView()
  .searchable(text: $text)
}
Then you could query isSearching in either MiddleView or DetailView and the property would relate to the enclosing searchable modifier.

Aimin
Thank you @Harry (Apple), that made a lot of sense.

----------

Request ManagerWORKFLOW Jun 8th at 2:58 PM
@Kevin has asked:
With the goal to bring deeper adoption of SwiftUI this year, should we implement more SwiftUI code instead of improve catalyst apps ?

Curt (Apple)
This really depends on your particular app and use case. It would be a great question to take to the labs!